{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projects\\\\React Projects\\\\local-chat\\\\src\\\\components\\\\Input.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from \"react\";\nimport Img from \"../img/img.png\";\nimport Attach from \"../img/attach.png\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { ChatContext } from \"../context/ChatContext\";\nimport { arrayUnion, doc, serverTimestamp, Timestamp, updateDoc } from \"firebase/firestore\";\nimport { db, storage } from \"../firebase\";\nimport { v4 as uuid } from \"uuid\";\nimport { getDownloadURL, ref, uploadBytesResumable } from \"firebase/storage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Input = () => {\n  _s();\n\n  const [text, setText] = useState(\"\");\n  const [img, setImg] = useState(null);\n  const [sending, setSending] = useState(false);\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  const {\n    data\n  } = useContext(ChatContext);\n  var temp = \"\";\n\n  const handleSend = async () => {\n    temp = text;\n    setText(\"\");\n\n    if (!temp && !img) {\n      return; // Don't send empty messages\n    }\n\n    setSending(true);\n\n    try {\n      if (img) {\n        const storageRef = ref(storage, uuid());\n        const uploadTask = uploadBytesResumable(storageRef, img);\n        uploadTask.on(error => {}, () => {\n          getDownloadURL(uploadTask.snapshot.ref).then(async downloadURL => {\n            await updateDoc(doc(db, \"chats\", data.chatId), {\n              messages: arrayUnion({\n                id: uuid(),\n                text,\n                senderId: currentUser.uid,\n                date: Timestamp.now(),\n                img: downloadURL\n              })\n            });\n          });\n        });\n      } else {\n        await updateDoc(doc(db, \"chats\", data.chatId), {\n          messages: arrayUnion({\n            id: uuid(),\n            text: temp,\n            senderId: currentUser.uid,\n            date: Timestamp.now()\n          })\n        });\n      }\n\n      await updateDoc(doc(db, \"userChats\", currentUser.uid), {\n        [data.chatId + \".lastMessage\"]: {\n          text: temp\n        },\n        [data.chatId + \".date\"]: serverTimestamp()\n      });\n      await updateDoc(doc(db, \"userChats\", data.user.uid), {\n        [data.chatId + \".lastMessage\"]: {\n          text: temp\n        },\n        [data.chatId + \".date\"]: serverTimestamp()\n      });\n      temp = \"\";\n      setText(\"\"); // Clear the input field after sending\n\n      setImg(null);\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n    } finally {\n      setSending(false);\n    }\n  };\n\n  const handleKeyDown = event => {\n    if (event.key === \"Enter\") {\n      event.preventDefault(); // Prevent Enter from adding a new line\n\n      handleSend();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Type something...\",\n      onChange: e => setText(e.target.value),\n      onKeyDown: handleKeyDown,\n      value: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"send\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        style: {\n          display: \"none\"\n        },\n        id: \"file\",\n        onChange: e => setImg(e.target.files[0])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: Img,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        disabled: sending,\n        children: sending ? \"Sending...\" : \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Input, \"obpVmHToDRXxMFQq3tj0T6rHAO0=\");\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["E:/Projects/React Projects/local-chat/src/components/Input.jsx"],"names":["React","useContext","useState","Img","Attach","AuthContext","ChatContext","arrayUnion","doc","serverTimestamp","Timestamp","updateDoc","db","storage","v4","uuid","getDownloadURL","ref","uploadBytesResumable","Input","text","setText","img","setImg","sending","setSending","currentUser","data","temp","handleSend","storageRef","uploadTask","on","error","snapshot","then","downloadURL","chatId","messages","id","senderId","uid","date","now","user","console","handleKeyDown","event","key","preventDefault","e","target","value","display","files"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from \"react\";\r\nimport Img from \"../img/img.png\";\r\nimport Attach from \"../img/attach.png\";\r\nimport { AuthContext } from \"../context/AuthContext\";\r\nimport { ChatContext } from \"../context/ChatContext\";\r\nimport {\r\n  arrayUnion,\r\n  doc,\r\n  serverTimestamp,\r\n  Timestamp,\r\n  updateDoc,\r\n} from \"firebase/firestore\";\r\nimport { db, storage } from \"../firebase\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { getDownloadURL, ref, uploadBytesResumable } from \"firebase/storage\";\r\n\r\nconst Input = () => {\r\n  const [text, setText] = useState(\"\");\r\n  const [img, setImg] = useState(null);\r\n  const [sending, setSending] = useState(false);\r\n\r\n  const { currentUser } = useContext(AuthContext);\r\n  const { data } = useContext(ChatContext);\r\n  var temp = \"\";\r\n  const handleSend = async () => {\r\n    temp = text;\r\n    setText(\"\");\r\n    if (!temp && !img) {\r\n      return; // Don't send empty messages\r\n    }\r\n\r\n    setSending(true);\r\n\r\n    try {\r\n      if (img) {\r\n        const storageRef = ref(storage, uuid());\r\n        const uploadTask = uploadBytesResumable(storageRef, img);\r\n\r\n        uploadTask.on(\r\n          (error) => {},\r\n          () => {\r\n            getDownloadURL(uploadTask.snapshot.ref).then(\r\n              async (downloadURL) => {\r\n                await updateDoc(doc(db, \"chats\", data.chatId), {\r\n                  messages: arrayUnion({\r\n                    id: uuid(),\r\n                    text,\r\n                    senderId: currentUser.uid,\r\n                    date: Timestamp.now(),\r\n                    img: downloadURL,\r\n                  }),\r\n                });\r\n              }\r\n            );\r\n          }\r\n        );\r\n      } else {\r\n        await updateDoc(doc(db, \"chats\", data.chatId), {\r\n          messages: arrayUnion({\r\n            id: uuid(),\r\n            text: temp,\r\n            senderId: currentUser.uid,\r\n            date: Timestamp.now(),\r\n          }),\r\n        });\r\n      }\r\n\r\n      await updateDoc(doc(db, \"userChats\", currentUser.uid), {\r\n        [data.chatId + \".lastMessage\"]: {\r\n          text: temp,\r\n        },\r\n        [data.chatId + \".date\"]: serverTimestamp(),\r\n      });\r\n\r\n      await updateDoc(doc(db, \"userChats\", data.user.uid), {\r\n        [data.chatId + \".lastMessage\"]: {\r\n          text: temp,\r\n        },\r\n        [data.chatId + \".date\"]: serverTimestamp(),\r\n      });\r\n      temp = \"\";\r\n      setText(\"\"); // Clear the input field after sending\r\n      setImg(null);\r\n    } catch (error) {\r\n      console.error(\"Error sending message:\", error);\r\n    } finally {\r\n      setSending(false);\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      event.preventDefault(); // Prevent Enter from adding a new line\r\n      handleSend();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"input\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Type something...\"\r\n        onChange={(e) => setText(e.target.value)}\r\n        onKeyDown={handleKeyDown}\r\n        value={text}\r\n      />\r\n      <div className=\"send\">\r\n        <input\r\n          type=\"file\"\r\n          style={{ display: \"none\" }}\r\n          id=\"file\"\r\n          onChange={(e) => setImg(e.target.files[0])}\r\n        />\r\n        <label htmlFor=\"file\">\r\n          <img src={Img} alt=\"\" />\r\n        </label>\r\n        <button onClick={handleSend} disabled={sending}>\r\n          {sending ? \"Sending...\" : \"Send\"}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n"]},"metadata":{},"sourceType":"module"}