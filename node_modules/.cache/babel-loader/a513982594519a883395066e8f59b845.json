{"ast":null,"code":"import _toConsumableArray from \"E:/Projects/React Projects/local-chat/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _asyncToGenerator from \"E:/Projects/React Projects/local-chat/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"E:/Projects/React Projects/local-chat/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"E:/Projects/React Projects/local-chat/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"E:/Projects/React Projects/local-chat/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/Projects/React Projects/local-chat/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"E:/Projects/React Projects/local-chat/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"E:/Projects/React Projects/local-chat/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"E:/Projects/React Projects/local-chat/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"E:\\\\Projects\\\\React Projects\\\\local-chat\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport { _getProvider, getApp, _registerComponent, registerVersion, SDK_VERSION } from '@firebase/app';\nimport { FirebaseError, isNode, createMockUserToken, getModularInstance, getDefaultEmulatorHostnameAndPort } from '@firebase/util';\nimport { Component } from '@firebase/component';\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @fileoverview Constants used in the Firebase Storage library.\r\n */\n\n/**\r\n * Domain name for firebase storage.\r\n */\n\nvar DEFAULT_HOST = 'firebasestorage.googleapis.com';\n/**\r\n * The key in Firebase config json for the storage bucket.\r\n */\n\nvar CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n/**\r\n * 2 minutes\r\n *\r\n * The timeout for all operations except upload.\r\n */\n\nvar DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n/**\r\n * 10 minutes\r\n *\r\n * The timeout for upload.\r\n */\n\nvar DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n/**\r\n * 1 second\r\n */\n\nvar DEFAULT_MIN_SLEEP_TIME_MILLIS = 1000;\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An error returned by the Firebase Storage SDK.\r\n * @public\r\n */\n\nvar StorageError = /*#__PURE__*/function (_FirebaseError) {\n  _inherits(StorageError, _FirebaseError);\n\n  var _super = _createSuper(StorageError);\n\n  /**\r\n   * @param code - A `StorageErrorCode` string to be prefixed with 'storage/' and\r\n   *  added to the end of the message.\r\n   * @param message  - Error message.\r\n   * @param status_ - Corresponding HTTP Status Code\r\n   */\n  function StorageError(code, message) {\n    var _this;\n\n    var status_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n    _classCallCheck(this, StorageError);\n\n    _this = _super.call(this, prependCode(code), \"Firebase Storage: \".concat(message, \" (\").concat(prependCode(code), \")\"));\n    _this.status_ = status_;\n    /**\r\n     * Stores custom error data unique to the `StorageError`.\r\n     */\n\n    _this.customData = {\n      serverResponse: null\n    };\n    _this._baseMessage = _this.message; // Without this, `instanceof StorageError`, in tests for example,\n    // returns false.\n\n    Object.setPrototypeOf(_assertThisInitialized(_this), StorageError.prototype);\n    return _this;\n  }\n\n  _createClass(StorageError, [{\n    key: \"status\",\n    get: function get() {\n      return this.status_;\n    },\n    set: function set(status) {\n      this.status_ = status;\n    }\n    /**\r\n     * Compares a `StorageErrorCode` against this error's code, filtering out the prefix.\r\n     */\n\n  }, {\n    key: \"_codeEquals\",\n    value: function _codeEquals(code) {\n      return prependCode(code) === this.code;\n    }\n    /**\r\n     * Optional response message that was added by the server.\r\n     */\n\n  }, {\n    key: \"serverResponse\",\n    get: function get() {\n      return this.customData.serverResponse;\n    },\n    set: function set(serverResponse) {\n      this.customData.serverResponse = serverResponse;\n\n      if (this.customData.serverResponse) {\n        this.message = \"\".concat(this._baseMessage, \"\\n\").concat(this.customData.serverResponse);\n      } else {\n        this.message = this._baseMessage;\n      }\n    }\n  }]);\n\n  return StorageError;\n}(FirebaseError);\n/**\r\n * @public\r\n * Error codes that can be attached to `StorageError` objects.\r\n */\n\n\nvar StorageErrorCode;\n\n(function (StorageErrorCode) {\n  // Shared between all platforms\n  StorageErrorCode[\"UNKNOWN\"] = \"unknown\";\n  StorageErrorCode[\"OBJECT_NOT_FOUND\"] = \"object-not-found\";\n  StorageErrorCode[\"BUCKET_NOT_FOUND\"] = \"bucket-not-found\";\n  StorageErrorCode[\"PROJECT_NOT_FOUND\"] = \"project-not-found\";\n  StorageErrorCode[\"QUOTA_EXCEEDED\"] = \"quota-exceeded\";\n  StorageErrorCode[\"UNAUTHENTICATED\"] = \"unauthenticated\";\n  StorageErrorCode[\"UNAUTHORIZED\"] = \"unauthorized\";\n  StorageErrorCode[\"UNAUTHORIZED_APP\"] = \"unauthorized-app\";\n  StorageErrorCode[\"RETRY_LIMIT_EXCEEDED\"] = \"retry-limit-exceeded\";\n  StorageErrorCode[\"INVALID_CHECKSUM\"] = \"invalid-checksum\";\n  StorageErrorCode[\"CANCELED\"] = \"canceled\"; // JS specific\n\n  StorageErrorCode[\"INVALID_EVENT_NAME\"] = \"invalid-event-name\";\n  StorageErrorCode[\"INVALID_URL\"] = \"invalid-url\";\n  StorageErrorCode[\"INVALID_DEFAULT_BUCKET\"] = \"invalid-default-bucket\";\n  StorageErrorCode[\"NO_DEFAULT_BUCKET\"] = \"no-default-bucket\";\n  StorageErrorCode[\"CANNOT_SLICE_BLOB\"] = \"cannot-slice-blob\";\n  StorageErrorCode[\"SERVER_FILE_WRONG_SIZE\"] = \"server-file-wrong-size\";\n  StorageErrorCode[\"NO_DOWNLOAD_URL\"] = \"no-download-url\";\n  StorageErrorCode[\"INVALID_ARGUMENT\"] = \"invalid-argument\";\n  StorageErrorCode[\"INVALID_ARGUMENT_COUNT\"] = \"invalid-argument-count\";\n  StorageErrorCode[\"APP_DELETED\"] = \"app-deleted\";\n  StorageErrorCode[\"INVALID_ROOT_OPERATION\"] = \"invalid-root-operation\";\n  StorageErrorCode[\"INVALID_FORMAT\"] = \"invalid-format\";\n  StorageErrorCode[\"INTERNAL_ERROR\"] = \"internal-error\";\n  StorageErrorCode[\"UNSUPPORTED_ENVIRONMENT\"] = \"unsupported-environment\";\n})(StorageErrorCode || (StorageErrorCode = {}));\n\nfunction prependCode(code) {\n  return 'storage/' + code;\n}\n\nfunction unknown() {\n  var message = 'An unknown error occurred, please check the error payload for ' + 'server response.';\n  return new StorageError(StorageErrorCode.UNKNOWN, message);\n}\n\nfunction objectNotFound(path) {\n  return new StorageError(StorageErrorCode.OBJECT_NOT_FOUND, \"Object '\" + path + \"' does not exist.\");\n}\n\nfunction quotaExceeded(bucket) {\n  return new StorageError(StorageErrorCode.QUOTA_EXCEEDED, \"Quota for bucket '\" + bucket + \"' exceeded, please view quota on \" + 'https://firebase.google.com/pricing/.');\n}\n\nfunction unauthenticated() {\n  var message = 'User is not authenticated, please authenticate using Firebase ' + 'Authentication and try again.';\n  return new StorageError(StorageErrorCode.UNAUTHENTICATED, message);\n}\n\nfunction unauthorizedApp() {\n  return new StorageError(StorageErrorCode.UNAUTHORIZED_APP, 'This app does not have permission to access Firebase Storage on this project.');\n}\n\nfunction unauthorized(path) {\n  return new StorageError(StorageErrorCode.UNAUTHORIZED, \"User does not have permission to access '\" + path + \"'.\");\n}\n\nfunction retryLimitExceeded() {\n  return new StorageError(StorageErrorCode.RETRY_LIMIT_EXCEEDED, 'Max retry time for operation exceeded, please try again.');\n}\n\nfunction canceled() {\n  return new StorageError(StorageErrorCode.CANCELED, 'User canceled the upload/download.');\n}\n\nfunction invalidUrl(url) {\n  return new StorageError(StorageErrorCode.INVALID_URL, \"Invalid URL '\" + url + \"'.\");\n}\n\nfunction invalidDefaultBucket(bucket) {\n  return new StorageError(StorageErrorCode.INVALID_DEFAULT_BUCKET, \"Invalid default bucket '\" + bucket + \"'.\");\n}\n\nfunction noDefaultBucket() {\n  return new StorageError(StorageErrorCode.NO_DEFAULT_BUCKET, 'No default bucket ' + \"found. Did you set the '\" + CONFIG_STORAGE_BUCKET_KEY + \"' property when initializing the app?\");\n}\n\nfunction cannotSliceBlob() {\n  return new StorageError(StorageErrorCode.CANNOT_SLICE_BLOB, 'Cannot slice blob for upload. Please retry the upload.');\n}\n\nfunction serverFileWrongSize() {\n  return new StorageError(StorageErrorCode.SERVER_FILE_WRONG_SIZE, 'Server recorded incorrect upload file size, please retry the upload.');\n}\n\nfunction noDownloadURL() {\n  return new StorageError(StorageErrorCode.NO_DOWNLOAD_URL, 'The given file does not have any download URLs.');\n}\n\nfunction missingPolyFill(polyFill) {\n  return new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, \"\".concat(polyFill, \" is missing. Make sure to install the required polyfills. See https://firebase.google.com/docs/web/environments-js-sdk#polyfills for more information.\"));\n}\n/**\r\n * @internal\r\n */\n\n\nfunction invalidArgument(message) {\n  return new StorageError(StorageErrorCode.INVALID_ARGUMENT, message);\n}\n\nfunction appDeleted() {\n  return new StorageError(StorageErrorCode.APP_DELETED, 'The Firebase app was deleted.');\n}\n/**\r\n * @param name - The name of the operation that was invalid.\r\n *\r\n * @internal\r\n */\n\n\nfunction invalidRootOperation(name) {\n  return new StorageError(StorageErrorCode.INVALID_ROOT_OPERATION, \"The operation '\" + name + \"' cannot be performed on a root reference, create a non-root \" + \"reference using child, such as .child('file.png').\");\n}\n/**\r\n * @param format - The format that was not valid.\r\n * @param message - A message describing the format violation.\r\n */\n\n\nfunction invalidFormat(format, message) {\n  return new StorageError(StorageErrorCode.INVALID_FORMAT, \"String does not match format '\" + format + \"': \" + message);\n}\n/**\r\n * @param message - A message describing the internal error.\r\n */\n\n\nfunction internalError(message) {\n  throw new StorageError(StorageErrorCode.INTERNAL_ERROR, 'Internal error: ' + message);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Firebase Storage location data.\r\n *\r\n * @internal\r\n */\n\n\nvar Location = /*#__PURE__*/function () {\n  function Location(bucket, path) {\n    _classCallCheck(this, Location);\n\n    this.bucket = bucket;\n    this.path_ = path;\n  }\n\n  _createClass(Location, [{\n    key: \"path\",\n    get: function get() {\n      return this.path_;\n    }\n  }, {\n    key: \"isRoot\",\n    get: function get() {\n      return this.path.length === 0;\n    }\n  }, {\n    key: \"fullServerUrl\",\n    value: function fullServerUrl() {\n      var encode = encodeURIComponent;\n      return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n    }\n  }, {\n    key: \"bucketOnlyServerUrl\",\n    value: function bucketOnlyServerUrl() {\n      var encode = encodeURIComponent;\n      return '/b/' + encode(this.bucket) + '/o';\n    }\n  }], [{\n    key: \"makeFromBucketSpec\",\n    value: function makeFromBucketSpec(bucketString, host) {\n      var bucketLocation;\n\n      try {\n        bucketLocation = Location.makeFromUrl(bucketString, host);\n      } catch (e) {\n        // Not valid URL, use as-is. This lets you put bare bucket names in\n        // config.\n        return new Location(bucketString, '');\n      }\n\n      if (bucketLocation.path === '') {\n        return bucketLocation;\n      } else {\n        throw invalidDefaultBucket(bucketString);\n      }\n    }\n  }, {\n    key: \"makeFromUrl\",\n    value: function makeFromUrl(url, host) {\n      var location = null;\n      var bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n      function gsModify(loc) {\n        if (loc.path.charAt(loc.path.length - 1) === '/') {\n          loc.path_ = loc.path_.slice(0, -1);\n        }\n      }\n\n      var gsPath = '(/(.*))?$';\n      var gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n      var gsIndices = {\n        bucket: 1,\n        path: 3\n      };\n\n      function httpModify(loc) {\n        loc.path_ = decodeURIComponent(loc.path);\n      }\n\n      var version = 'v[A-Za-z0-9_]+';\n      var firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n      var firebaseStoragePath = '(/([^?#]*).*)?$';\n      var firebaseStorageRegExp = new RegExp(\"^https?://\".concat(firebaseStorageHost, \"/\").concat(version, \"/b/\").concat(bucketDomain, \"/o\").concat(firebaseStoragePath), 'i');\n      var firebaseStorageIndices = {\n        bucket: 1,\n        path: 3\n      };\n      var cloudStorageHost = host === DEFAULT_HOST ? '(?:storage.googleapis.com|storage.cloud.google.com)' : host;\n      var cloudStoragePath = '([^?#]*)';\n      var cloudStorageRegExp = new RegExp(\"^https?://\".concat(cloudStorageHost, \"/\").concat(bucketDomain, \"/\").concat(cloudStoragePath), 'i');\n      var cloudStorageIndices = {\n        bucket: 1,\n        path: 2\n      };\n      var groups = [{\n        regex: gsRegex,\n        indices: gsIndices,\n        postModify: gsModify\n      }, {\n        regex: firebaseStorageRegExp,\n        indices: firebaseStorageIndices,\n        postModify: httpModify\n      }, {\n        regex: cloudStorageRegExp,\n        indices: cloudStorageIndices,\n        postModify: httpModify\n      }];\n\n      for (var i = 0; i < groups.length; i++) {\n        var group = groups[i];\n        var captures = group.regex.exec(url);\n\n        if (captures) {\n          var bucketValue = captures[group.indices.bucket];\n          var pathValue = captures[group.indices.path];\n\n          if (!pathValue) {\n            pathValue = '';\n          }\n\n          location = new Location(bucketValue, pathValue);\n          group.postModify(location);\n          break;\n        }\n      }\n\n      if (location == null) {\n        throw invalidUrl(url);\n      }\n\n      return location;\n    }\n  }]);\n\n  return Location;\n}();\n/**\r\n * A request whose promise always fails.\r\n */\n\n\nvar FailRequest = /*#__PURE__*/function () {\n  function FailRequest(error) {\n    _classCallCheck(this, FailRequest);\n\n    this.promise_ = Promise.reject(error);\n  }\n  /** @inheritDoc */\n\n\n  _createClass(FailRequest, [{\n    key: \"getPromise\",\n    value: function getPromise() {\n      return this.promise_;\n    }\n    /** @inheritDoc */\n\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      var _appDelete = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    }\n  }]);\n\n  return FailRequest;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Accepts a callback for an action to perform (`doRequest`),\r\n * and then a callback for when the backoff has completed (`backoffCompleteCb`).\r\n * The callback sent to start requires an argument to call (`onRequestComplete`).\r\n * When `start` calls `doRequest`, it passes a callback for when the request has\r\n * completed, `onRequestComplete`. Based on this, the backoff continues, with\r\n * another call to `doRequest` and the above loop continues until the timeout\r\n * is hit, or a successful response occurs.\r\n * @description\r\n * @param doRequest Callback to perform request\r\n * @param backoffCompleteCb Callback to call when backoff has been completed\r\n */\n\n\nfunction start(doRequest, // eslint-disable-next-line @typescript-eslint/no-explicit-any\nbackoffCompleteCb, timeout) {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  var waitSeconds = 1; // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  var retryTimeoutId = null; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  var globalTimeoutId = null;\n  var hitTimeout = false;\n  var cancelState = 0;\n\n  function canceled() {\n    return cancelState === 2;\n  }\n\n  var triggeredCallback = false;\n\n  function triggerCallback() {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      backoffCompleteCb.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis) {\n    retryTimeoutId = setTimeout(function () {\n      retryTimeoutId = null;\n      doRequest(responseHandler, canceled());\n    }, millis);\n  }\n\n  function clearGlobalTimeout() {\n    if (globalTimeoutId) {\n      clearTimeout(globalTimeoutId);\n    }\n  }\n\n  function responseHandler(success) {\n    if (triggeredCallback) {\n      clearGlobalTimeout();\n      return;\n    }\n\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    if (success) {\n      clearGlobalTimeout();\n      triggerCallback.call.apply(triggerCallback, [null, success].concat(args));\n      return;\n    }\n\n    var mustStop = canceled() || hitTimeout;\n\n    if (mustStop) {\n      clearGlobalTimeout();\n      triggerCallback.call.apply(triggerCallback, [null, success].concat(args));\n      return;\n    }\n\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n\n    var waitMillis;\n\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n\n    callWithDelay(waitMillis);\n  }\n\n  var stopped = false;\n\n  function stop(wasTimeout) {\n    if (stopped) {\n      return;\n    }\n\n    stopped = true;\n    clearGlobalTimeout();\n\n    if (triggeredCallback) {\n      return;\n    }\n\n    if (retryTimeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n\n      clearTimeout(retryTimeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n\n  callWithDelay(0);\n  globalTimeoutId = setTimeout(function () {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n/**\r\n * Stops the retry loop from repeating.\r\n * If the function is currently \"in between\" retries, it is invoked immediately\r\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\r\n * after the current invocation finishes iff the current invocation would have\r\n * triggered another retry.\r\n */\n\n\nfunction stop(id) {\n  id(false);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction isJustDef(p) {\n  return p !== void 0;\n} // eslint-disable-next-line @typescript-eslint/ban-types\n\n\nfunction isFunction(p) {\n  return typeof p === 'function';\n}\n\nfunction isNonArrayObject(p) {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nfunction isString(p) {\n  return typeof p === 'string' || p instanceof String;\n}\n\nfunction isNativeBlob(p) {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nfunction isNativeBlobDefined() {\n  // Note: The `isNode()` check can be removed when `node-fetch` adds native Blob support\n  // PR: https://github.com/node-fetch/node-fetch/pull/1664\n  return typeof Blob !== 'undefined' && !isNode();\n}\n\nfunction validateNumber(argument, minValue, maxValue, value) {\n  if (value < minValue) {\n    throw invalidArgument(\"Invalid value for '\".concat(argument, \"'. Expected \").concat(minValue, \" or greater.\"));\n  }\n\n  if (value > maxValue) {\n    throw invalidArgument(\"Invalid value for '\".concat(argument, \"'. Expected \").concat(maxValue, \" or less.\"));\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction makeUrl(urlPart, host, protocol) {\n  var origin = host;\n\n  if (protocol == null) {\n    origin = \"https://\".concat(host);\n  }\n\n  return \"\".concat(protocol, \"://\").concat(origin, \"/v0\").concat(urlPart);\n}\n\nfunction makeQueryString(params) {\n  var encode = encodeURIComponent;\n  var queryPart = '?';\n\n  for (var key in params) {\n    if (params.hasOwnProperty(key)) {\n      var nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  } // Chop off the extra '&' or '?' on the end\n\n\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Error codes for requests made by the the XhrIo wrapper.\r\n */\n\n\nvar ErrorCode;\n\n(function (ErrorCode) {\n  ErrorCode[ErrorCode[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\n  ErrorCode[ErrorCode[\"NETWORK_ERROR\"] = 1] = \"NETWORK_ERROR\";\n  ErrorCode[ErrorCode[\"ABORT\"] = 2] = \"ABORT\";\n})(ErrorCode || (ErrorCode = {}));\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Checks the status code to see if the action should be retried.\r\n *\r\n * @param status Current HTTP status code returned by server.\r\n * @param additionalRetryCodes additional retry codes to check against\r\n */\n\n\nfunction isRetryStatusCode(status, additionalRetryCodes) {\n  // The codes for which to retry came from this page:\n  // https://cloud.google.com/storage/docs/exponential-backoff\n  var isFiveHundredCode = status >= 500 && status < 600;\n  var extraRetryCodes = [// Request Timeout: web server didn't receive full request in time.\n  408, // Too Many Requests: you're getting rate-limited, basically.\n  429];\n  var isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n  var isAdditionalRetryCode = additionalRetryCodes.indexOf(status) !== -1;\n  return isFiveHundredCode || isExtraRetryCode || isAdditionalRetryCode;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Handles network logic for all Storage Requests, including error reporting and\r\n * retries with backoff.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param - O the output type used by the rest of the SDK. The conversion\r\n * happens in the specified `callback_`.\r\n */\n\n\nvar NetworkRequest = /*#__PURE__*/function () {\n  function NetworkRequest(url_, method_, headers_, body_, successCodes_, additionalRetryCodes_, callback_, errorCallback_, timeout_, progressCallback_, connectionFactory_) {\n    var _this2 = this;\n\n    var retry = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : true;\n\n    _classCallCheck(this, NetworkRequest);\n\n    this.url_ = url_;\n    this.method_ = method_;\n    this.headers_ = headers_;\n    this.body_ = body_;\n    this.successCodes_ = successCodes_;\n    this.additionalRetryCodes_ = additionalRetryCodes_;\n    this.callback_ = callback_;\n    this.errorCallback_ = errorCallback_;\n    this.timeout_ = timeout_;\n    this.progressCallback_ = progressCallback_;\n    this.connectionFactory_ = connectionFactory_;\n    this.retry = retry;\n    this.pendingConnection_ = null;\n    this.backoffId_ = null;\n    this.canceled_ = false;\n    this.appDelete_ = false;\n    this.promise_ = new Promise(function (resolve, reject) {\n      _this2.resolve_ = resolve;\n      _this2.reject_ = reject;\n\n      _this2.start_();\n    });\n  }\n  /**\r\n   * Actually starts the retry loop.\r\n   */\n\n\n  _createClass(NetworkRequest, [{\n    key: \"start_\",\n    value: function start_() {\n      var _this3 = this;\n\n      var doTheRequest = function doTheRequest(backoffCallback, canceled) {\n        if (canceled) {\n          backoffCallback(false, new RequestEndStatus(false, null, true));\n          return;\n        }\n\n        var connection = _this3.connectionFactory_();\n\n        _this3.pendingConnection_ = connection;\n\n        var progressListener = function progressListener(progressEvent) {\n          var loaded = progressEvent.loaded;\n          var total = progressEvent.lengthComputable ? progressEvent.total : -1;\n\n          if (_this3.progressCallback_ !== null) {\n            _this3.progressCallback_(loaded, total);\n          }\n        };\n\n        if (_this3.progressCallback_ !== null) {\n          connection.addUploadProgressListener(progressListener);\n        } // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n\n        connection.send(_this3.url_, _this3.method_, _this3.body_, _this3.headers_).then(function () {\n          if (_this3.progressCallback_ !== null) {\n            connection.removeUploadProgressListener(progressListener);\n          }\n\n          _this3.pendingConnection_ = null;\n          var hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n          var status = connection.getStatus();\n\n          if (!hitServer || isRetryStatusCode(status, _this3.additionalRetryCodes_) && _this3.retry) {\n            var wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n            backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));\n            return;\n          }\n\n          var successCode = _this3.successCodes_.indexOf(status) !== -1;\n          backoffCallback(true, new RequestEndStatus(successCode, connection));\n        });\n      };\n      /**\r\n       * @param requestWentThrough - True if the request eventually went\r\n       *     through, false if it hit the retry limit or was canceled.\r\n       */\n\n\n      var backoffDone = function backoffDone(requestWentThrough, status) {\n        var resolve = _this3.resolve_;\n        var reject = _this3.reject_;\n        var connection = status.connection;\n\n        if (status.wasSuccessCode) {\n          try {\n            var result = _this3.callback_(connection, connection.getResponse());\n\n            if (isJustDef(result)) {\n              resolve(result);\n            } else {\n              resolve();\n            }\n          } catch (e) {\n            reject(e);\n          }\n        } else {\n          if (connection !== null) {\n            var err = unknown();\n            err.serverResponse = connection.getErrorText();\n\n            if (_this3.errorCallback_) {\n              reject(_this3.errorCallback_(connection, err));\n            } else {\n              reject(err);\n            }\n          } else {\n            if (status.canceled) {\n              var _err = _this3.appDelete_ ? appDeleted() : canceled();\n\n              reject(_err);\n            } else {\n              var _err2 = retryLimitExceeded();\n\n              reject(_err2);\n            }\n          }\n        }\n      };\n\n      if (this.canceled_) {\n        backoffDone(false, new RequestEndStatus(false, null, true));\n      } else {\n        this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n      }\n    }\n    /** @inheritDoc */\n\n  }, {\n    key: \"getPromise\",\n    value: function getPromise() {\n      return this.promise_;\n    }\n    /** @inheritDoc */\n\n  }, {\n    key: \"cancel\",\n    value: function cancel(appDelete) {\n      this.canceled_ = true;\n      this.appDelete_ = appDelete || false;\n\n      if (this.backoffId_ !== null) {\n        stop(this.backoffId_);\n      }\n\n      if (this.pendingConnection_ !== null) {\n        this.pendingConnection_.abort();\n      }\n    }\n  }]);\n\n  return NetworkRequest;\n}();\n/**\r\n * A collection of information about the result of a network request.\r\n * @param opt_canceled - Defaults to false.\r\n */\n\n\nvar RequestEndStatus = /*#__PURE__*/_createClass(function RequestEndStatus(wasSuccessCode, connection, canceled) {\n  _classCallCheck(this, RequestEndStatus);\n\n  this.wasSuccessCode = wasSuccessCode;\n  this.connection = connection;\n  this.canceled = !!canceled;\n});\n\nfunction addAuthHeader_(headers, authToken) {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nfunction addVersionHeader_(headers, firebaseVersion) {\n  headers['X-Firebase-Storage-Version'] = 'webjs/' + (firebaseVersion !== null && firebaseVersion !== void 0 ? firebaseVersion : 'AppManager');\n}\n\nfunction addGmpidHeader_(headers, appId) {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nfunction addAppCheckHeader_(headers, appCheckToken) {\n  if (appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = appCheckToken;\n  }\n}\n\nfunction makeRequest(requestInfo, appId, authToken, appCheckToken, requestFactory, firebaseVersion) {\n  var retry = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : true;\n  var queryPart = makeQueryString(requestInfo.urlParams);\n  var url = requestInfo.url + queryPart;\n  var headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  addAppCheckHeader_(headers, appCheckToken);\n  return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, requestFactory, retry);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction getBlobBuilder() {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n/**\r\n * Concatenates one or more values together and converts them to a Blob.\r\n *\r\n * @param args The values that will make up the resulting blob.\r\n * @return The blob.\r\n */\n\n\nfunction getBlob$1() {\n  var BlobBuilder = getBlobBuilder();\n\n  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n\n  if (BlobBuilder !== undefined) {\n    var bb = new BlobBuilder();\n\n    for (var i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, \"This browser doesn't seem to support creating Blobs\");\n    }\n  }\n}\n/**\r\n * Slices the blob. The returned blob contains data from the start byte\r\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\r\n *\r\n * @param blob The blob to be sliced.\r\n * @param start Index of the starting byte.\r\n * @param end Index of the ending byte.\r\n * @return The blob slice or null if not supported.\r\n */\n\n\nfunction sliceBlob(blob, start, end) {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n\n  return null;\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Converts a Base64 encoded string to a binary string. */\n\n\nfunction decodeBase64(encoded) {\n  if (typeof atob === 'undefined') {\n    throw missingPolyFill('base-64');\n  }\n\n  return atob(encoded);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An enumeration of the possible string formats for upload.\r\n * @public\r\n */\n\n\nvar StringFormat = {\n  /**\r\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\r\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\r\n   * sequence.\r\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\r\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\r\n   */\n  RAW: 'raw',\n\n  /**\r\n   * Indicates the string should be interpreted as base64-encoded data.\r\n   * Padding characters (trailing '='s) are optional.\r\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\r\n   * ad 69 8e fb e1 3a b7 bf eb 97\r\n   */\n  BASE64: 'base64',\n\n  /**\r\n   * Indicates the string should be interpreted as base64url-encoded data.\r\n   * Padding characters (trailing '='s) are optional.\r\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\r\n   * ad 69 8e fb e1 3a b7 bf eb 97\r\n   */\n  BASE64URL: 'base64url',\n\n  /**\r\n   * Indicates the string is a data URL, such as one obtained from\r\n   * canvas.toDataURL().\r\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\r\n   * becomes the byte sequence\r\n   * 69 a6 9a\r\n   * (the content-type \"application/octet-stream\" is also applied, but can\r\n   * be overridden in the metadata object).\r\n   */\n  DATA_URL: 'data_url'\n};\n\nvar StringData = /*#__PURE__*/_createClass(function StringData(data, contentType) {\n  _classCallCheck(this, StringData);\n\n  this.data = data;\n  this.contentType = contentType || null;\n});\n/**\r\n * @internal\r\n */\n\n\nfunction dataFromString(format, stringData) {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n\n    case StringFormat.DATA_URL:\n      return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));\n    // do nothing\n  } // assert(false);\n\n\n  throw unknown();\n}\n\nfunction utf8Bytes_(value) {\n  var b = [];\n\n  for (var i = 0; i < value.length; i++) {\n    var c = value.charCodeAt(i);\n\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | c >> 6, 128 | c & 63);\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          var valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            var hi = c;\n            var lo = value.charCodeAt(++i);\n            c = 65536 | (hi & 1023) << 10 | lo & 1023;\n            b.push(240 | c >> 18, 128 | c >> 12 & 63, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | c >> 12, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        }\n      }\n    }\n  }\n\n  return new Uint8Array(b);\n}\n\nfunction percentEncodedBytes_(value) {\n  var decoded;\n\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n\n  return utf8Bytes_(decoded);\n}\n\nfunction base64Bytes_(format, value) {\n  switch (format) {\n    case StringFormat.BASE64:\n      {\n        var hasMinus = value.indexOf('-') !== -1;\n        var hasUnder = value.indexOf('_') !== -1;\n\n        if (hasMinus || hasUnder) {\n          var invalidChar = hasMinus ? '-' : '_';\n          throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64url encoded?\");\n        }\n\n        break;\n      }\n\n    case StringFormat.BASE64URL:\n      {\n        var hasPlus = value.indexOf('+') !== -1;\n        var hasSlash = value.indexOf('/') !== -1;\n\n        if (hasPlus || hasSlash) {\n          var _invalidChar = hasPlus ? '+' : '/';\n\n          throw invalidFormat(format, \"Invalid character '\" + _invalidChar + \"' found: is it base64 encoded?\");\n        }\n\n        value = value.replace(/-/g, '+').replace(/_/g, '/');\n        break;\n      }\n    // do nothing\n  }\n\n  var bytes;\n\n  try {\n    bytes = decodeBase64(value);\n  } catch (e) {\n    if (e.message.includes('polyfill')) {\n      throw e;\n    }\n\n    throw invalidFormat(format, 'Invalid character found');\n  }\n\n  var array = new Uint8Array(bytes.length);\n\n  for (var i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n\n  return array;\n}\n\nvar DataURLParts = /*#__PURE__*/_createClass(function DataURLParts(dataURL) {\n  _classCallCheck(this, DataURLParts);\n\n  this.base64 = false;\n  this.contentType = null;\n  var matches = dataURL.match(/^data:([^,]+)?,/);\n\n  if (matches === null) {\n    throw invalidFormat(StringFormat.DATA_URL, \"Must be formatted 'data:[<mediatype>][;base64],<data>\");\n  }\n\n  var middle = matches[1] || null;\n\n  if (middle != null) {\n    this.base64 = endsWith(middle, ';base64');\n    this.contentType = this.base64 ? middle.substring(0, middle.length - ';base64'.length) : middle;\n  }\n\n  this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n});\n\nfunction dataURLBytes_(dataUrl) {\n  var parts = new DataURLParts(dataUrl);\n\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nfunction dataURLContentType_(dataUrl) {\n  var parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s, end) {\n  var longEnough = s.length >= end.length;\n\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param opt_elideCopy - If true, doesn't copy mutable input data\r\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\r\n *     modified after this blob's construction.\r\n *\r\n * @internal\r\n */\n\n\nvar FbsBlob = /*#__PURE__*/function () {\n  function FbsBlob(data, elideCopy) {\n    _classCallCheck(this, FbsBlob);\n\n    var size = 0;\n    var blobType = '';\n\n    if (isNativeBlob(data)) {\n      this.data_ = data;\n      size = data.size;\n      blobType = data.type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data);\n      }\n\n      size = data.length;\n    }\n\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  _createClass(FbsBlob, [{\n    key: \"size\",\n    value: function size() {\n      return this.size_;\n    }\n  }, {\n    key: \"type\",\n    value: function type() {\n      return this.type_;\n    }\n  }, {\n    key: \"slice\",\n    value: function slice(startByte, endByte) {\n      if (isNativeBlob(this.data_)) {\n        var realBlob = this.data_;\n        var sliced = sliceBlob(realBlob, startByte, endByte);\n\n        if (sliced === null) {\n          return null;\n        }\n\n        return new FbsBlob(sliced);\n      } else {\n        var slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);\n        return new FbsBlob(slice, true);\n      }\n    }\n  }, {\n    key: \"uploadData\",\n    value: function uploadData() {\n      return this.data_;\n    }\n  }], [{\n    key: \"getBlob\",\n    value: function getBlob() {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      if (isNativeBlobDefined()) {\n        var blobby = args.map(function (val) {\n          if (val instanceof FbsBlob) {\n            return val.data_;\n          } else {\n            return val;\n          }\n        });\n        return new FbsBlob(getBlob$1.apply(null, blobby));\n      } else {\n        var uint8Arrays = args.map(function (val) {\n          if (isString(val)) {\n            return dataFromString(StringFormat.RAW, val).data;\n          } else {\n            // Blobs don't exist, so this has to be a Uint8Array.\n            return val.data_;\n          }\n        });\n        var finalLength = 0;\n        uint8Arrays.forEach(function (array) {\n          finalLength += array.byteLength;\n        });\n        var merged = new Uint8Array(finalLength);\n        var index = 0;\n        uint8Arrays.forEach(function (array) {\n          for (var i = 0; i < array.length; i++) {\n            merged[index++] = array[i];\n          }\n        });\n        return new FbsBlob(merged, true);\n      }\n    }\n  }]);\n\n  return FbsBlob;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns the Object resulting from parsing the given JSON, or null if the\r\n * given string does not represent a JSON object.\r\n */\n\n\nfunction jsonObjectOrNull(s) {\n  var obj;\n\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @fileoverview Contains helper methods for manipulating paths.\r\n */\n\n/**\r\n * @return Null if the path is already at the root.\r\n */\n\n\nfunction parent(path) {\n  if (path.length === 0) {\n    return null;\n  }\n\n  var index = path.lastIndexOf('/');\n\n  if (index === -1) {\n    return '';\n  }\n\n  var newPath = path.slice(0, index);\n  return newPath;\n}\n\nfunction child(path, childPath) {\n  var canonicalChildPath = childPath.split('/').filter(function (component) {\n    return component.length > 0;\n  }).join('/');\n\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n/**\r\n * Returns the last component of a path.\r\n * '/foo/bar' -> 'bar'\r\n * '/foo/bar/baz/' -> 'baz/'\r\n * '/a' -> 'a'\r\n */\n\n\nfunction lastComponent(path) {\n  var index = path.lastIndexOf('/', path.length - 2);\n\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction noXform_(metadata, value) {\n  return value;\n}\n\nvar Mapping = /*#__PURE__*/_createClass(function Mapping(server, local, writable, xform) {\n  _classCallCheck(this, Mapping);\n\n  this.server = server;\n  this.local = local || server;\n  this.writable = !!writable;\n  this.xform = xform || noXform_;\n});\n\nvar mappings_ = null;\n\nfunction xformPath(fullPath) {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\n\nfunction getMappings() {\n  if (mappings_) {\n    return mappings_;\n  }\n\n  var mappings = [];\n  mappings.push(new Mapping('bucket'));\n  mappings.push(new Mapping('generation'));\n  mappings.push(new Mapping('metageneration'));\n  mappings.push(new Mapping('name', 'fullPath', true));\n\n  function mappingsXformPath(_metadata, fullPath) {\n    return xformPath(fullPath);\n  }\n\n  var nameMapping = new Mapping('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n  /**\r\n   * Coerces the second param to a number, if it is defined.\r\n   */\n\n  function xformSize(_metadata, size) {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n\n  var sizeMapping = new Mapping('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping('timeCreated'));\n  mappings.push(new Mapping('updated'));\n  mappings.push(new Mapping('md5Hash', null, true));\n  mappings.push(new Mapping('cacheControl', null, true));\n  mappings.push(new Mapping('contentDisposition', null, true));\n  mappings.push(new Mapping('contentEncoding', null, true));\n  mappings.push(new Mapping('contentLanguage', null, true));\n  mappings.push(new Mapping('contentType', null, true));\n  mappings.push(new Mapping('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nfunction addRef(metadata, service) {\n  function generateRef() {\n    var bucket = metadata['bucket'];\n    var path = metadata['fullPath'];\n    var loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n\n  Object.defineProperty(metadata, 'ref', {\n    get: generateRef\n  });\n}\n\nfunction fromResource(service, resource, mappings) {\n  var metadata = {};\n  metadata['type'] = 'file';\n  var len = mappings.length;\n\n  for (var i = 0; i < len; i++) {\n    var mapping = mappings[i];\n    metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);\n  }\n\n  addRef(metadata, service);\n  return metadata;\n}\n\nfunction fromResourceString(service, resourceString, mappings) {\n  var obj = jsonObjectOrNull(resourceString);\n\n  if (obj === null) {\n    return null;\n  }\n\n  var resource = obj;\n  return fromResource(service, resource, mappings);\n}\n\nfunction downloadUrlFromResourceString(metadata, resourceString, host, protocol) {\n  var obj = jsonObjectOrNull(resourceString);\n\n  if (obj === null) {\n    return null;\n  }\n\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n\n  var tokens = obj['downloadTokens'];\n\n  if (tokens.length === 0) {\n    return null;\n  }\n\n  var encode = encodeURIComponent;\n  var tokensList = tokens.split(',');\n  var urls = tokensList.map(function (token) {\n    var bucket = metadata['bucket'];\n    var path = metadata['fullPath'];\n    var urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    var base = makeUrl(urlPart, host, protocol);\n    var queryString = makeQueryString({\n      alt: 'media',\n      token: token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nfunction toResourceString(metadata, mappings) {\n  var resource = {};\n  var len = mappings.length;\n\n  for (var i = 0; i < len; i++) {\n    var mapping = mappings[i];\n\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n\n  return JSON.stringify(resource);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar PREFIXES_KEY = 'prefixes';\nvar ITEMS_KEY = 'items';\n\nfunction fromBackendResponse(service, bucket, resource) {\n  var listResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n\n  if (resource[PREFIXES_KEY]) {\n    var _iterator = _createForOfIteratorHelper(resource[PREFIXES_KEY]),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var path = _step.value;\n        var pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n\n        var reference = service._makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));\n\n        listResult.prefixes.push(reference);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  if (resource[ITEMS_KEY]) {\n    var _iterator2 = _createForOfIteratorHelper(resource[ITEMS_KEY]),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var item = _step2.value;\n\n        var _reference = service._makeStorageReference(new Location(bucket, item['name']));\n\n        listResult.items.push(_reference);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n\n  return listResult;\n}\n\nfunction fromResponseString(service, bucket, resourceString) {\n  var obj = jsonObjectOrNull(resourceString);\n\n  if (obj === null) {\n    return null;\n  }\n\n  var resource = obj;\n  return fromBackendResponse(service, bucket, resource);\n}\n/**\r\n * Contains a fully specified request.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param O - the output response type used by the rest of the SDK.\r\n */\n\n\nvar RequestInfo = /*#__PURE__*/_createClass(function RequestInfo(url, method,\n/**\r\n * Returns the value with which to resolve the request's promise. Only called\r\n * if the request is successful. Throw from this function to reject the\r\n * returned Request's promise with the thrown error.\r\n * Note: The XhrIo passed to this function may be reused after this callback\r\n * returns. Do not keep a reference to it in any way.\r\n */\nhandler, timeout) {\n  _classCallCheck(this, RequestInfo);\n\n  this.url = url;\n  this.method = method;\n  this.handler = handler;\n  this.timeout = timeout;\n  this.urlParams = {};\n  this.headers = {};\n  this.body = null;\n  this.errorHandler = null;\n  /**\r\n   * Called with the current number of bytes uploaded and total size (-1 if not\r\n   * computable) of the request body (i.e. used to report upload progress).\r\n   */\n\n  this.progressCallback = null;\n  this.successCodes = [200];\n  this.additionalRetryCodes = [];\n});\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Throws the UNKNOWN StorageError if cndn is false.\r\n */\n\n\nfunction handlerCheck(cndn) {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nfunction metadataHandler(service, mappings) {\n  function handler(xhr, text) {\n    var metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata;\n  }\n\n  return handler;\n}\n\nfunction listHandler(service, bucket) {\n  function handler(xhr, text) {\n    var listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult;\n  }\n\n  return handler;\n}\n\nfunction downloadUrlHandler(service, mappings) {\n  function handler(xhr, text) {\n    var metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(metadata, text, service.host, service._protocol);\n  }\n\n  return handler;\n}\n\nfunction sharedErrorHandler(location) {\n  function errorHandler(xhr, err) {\n    var newErr;\n\n    if (xhr.getStatus() === 401) {\n      if ( // This exact message string is the only consistent part of the\n      // server's error response that identifies it as an App Check error.\n      xhr.getErrorText().includes('Firebase App Check token is invalid')) {\n        newErr = unauthorizedApp();\n      } else {\n        newErr = unauthenticated();\n      }\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n\n    newErr.status = xhr.getStatus();\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n\n  return errorHandler;\n}\n\nfunction objectErrorHandler(location) {\n  var shared = sharedErrorHandler(location);\n\n  function errorHandler(xhr, err) {\n    var newErr = shared(xhr, err);\n\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n\n  return errorHandler;\n}\n\nfunction getMetadata$2(service, location, mappings) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart, service.host, service._protocol);\n  var method = 'GET';\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction list$2(service, location, delimiter, pageToken, maxResults) {\n  var urlParams = {};\n\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n\n  var urlPart = location.bucketOnlyServerUrl();\n  var url = makeUrl(urlPart, service.host, service._protocol);\n  var method = 'GET';\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nfunction getBytes$1(service, location, maxDownloadSizeBytes) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\n  var method = 'GET';\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, function (_, data) {\n    return data;\n  }, timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n\n  if (maxDownloadSizeBytes !== undefined) {\n    requestInfo.headers['Range'] = \"bytes=0-\".concat(maxDownloadSizeBytes);\n    requestInfo.successCodes = [200\n    /* OK */\n    , 206\n    /* Partial Content */\n    ];\n  }\n\n  return requestInfo;\n}\n\nfunction getDownloadUrl(service, location, mappings) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart, service.host, service._protocol);\n  var method = 'GET';\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction updateMetadata$2(service, location, metadata, mappings) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart, service.host, service._protocol);\n  var method = 'PATCH';\n  var body = toResourceString(metadata, mappings);\n  var headers = {\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction deleteObject$2(service, location) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart, service.host, service._protocol);\n  var method = 'DELETE';\n  var timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr, _text) {}\n\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction determineContentType_(metadata, blob) {\n  return metadata && metadata['contentType'] || blob && blob.type() || 'application/octet-stream';\n}\n\nfunction metadataForUpload_(location, blob, metadata) {\n  var metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n\n  return metadataClone;\n}\n/**\r\n * Prepare RequestInfo for uploads as Content-Type: multipart.\r\n */\n\n\nfunction multipartUpload(service, location, mappings, blob, metadata) {\n  var urlPart = location.bucketOnlyServerUrl();\n  var headers = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary() {\n    var str = '';\n\n    for (var i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n\n    return str;\n  }\n\n  var boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  var metadata_ = metadataForUpload_(location, blob, metadata);\n  var metadataString = toResourceString(metadata_, mappings);\n  var preBlobPart = '--' + boundary + '\\r\\n' + 'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' + metadataString + '\\r\\n--' + boundary + '\\r\\n' + 'Content-Type: ' + metadata_['contentType'] + '\\r\\n\\r\\n';\n  var postBlobPart = '\\r\\n--' + boundary + '--';\n  var body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  var urlParams = {\n    name: metadata_['fullPath']\n  };\n  var url = makeUrl(urlPart, service.host, service._protocol);\n  var method = 'POST';\n  var timeout = service.maxUploadRetryTime;\n  var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @param current The number of bytes that have been uploaded so far.\r\n * @param total The total number of bytes in the upload.\r\n * @param opt_finalized True if the server has finished the upload.\r\n * @param opt_metadata The upload metadata, should\r\n *     only be passed if opt_finalized is true.\r\n */\n\n\nvar ResumableUploadStatus = /*#__PURE__*/_createClass(function ResumableUploadStatus(current, total, finalized, metadata) {\n  _classCallCheck(this, ResumableUploadStatus);\n\n  this.current = current;\n  this.total = total;\n  this.finalized = !!finalized;\n  this.metadata = metadata || null;\n});\n\nfunction checkResumeHeader_(xhr, allowed) {\n  var status = null;\n\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n\n  var allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status;\n}\n\nfunction createResumableUpload(service, location, mappings, blob, metadata) {\n  var urlPart = location.bucketOnlyServerUrl();\n  var metadataForUpload = metadataForUpload_(location, blob, metadata);\n  var urlParams = {\n    name: metadataForUpload['fullPath']\n  };\n  var url = makeUrl(urlPart, service.host, service._protocol);\n  var method = 'POST';\n  var headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': \"\".concat(blob.size()),\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  var body = toResourceString(metadataForUpload, mappings);\n  var timeout = service.maxUploadRetryTime;\n\n  function handler(xhr) {\n    checkResumeHeader_(xhr);\n    var url;\n\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    handlerCheck(isString(url));\n    return url;\n  }\n\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n */\n\n\nfunction getResumableUploadStatus(service, location, url, blob) {\n  var headers = {\n    'X-Goog-Upload-Command': 'query'\n  };\n\n  function handler(xhr) {\n    var status = checkResumeHeader_(xhr, ['active', 'final']);\n    var sizeString = null;\n\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    var size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n\n  var method = 'POST';\n  var timeout = service.maxUploadRetryTime;\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * Any uploads via the resumable upload API must transfer a number of bytes\r\n * that is a multiple of this number.\r\n */\n\n\nvar RESUMABLE_UPLOAD_CHUNK_SIZE = 256 * 1024;\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n * @param chunkSize Number of bytes to upload.\r\n * @param status The previous status.\r\n *     If not passed or null, we start from the beginning.\r\n * @throws fbs.Error If the upload is already complete, the passed in status\r\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\r\n *     for upload.\r\n */\n\nfunction continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  var status_ = new ResumableUploadStatus(0, 0);\n\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n\n  var bytesLeft = status_.total - status_.current;\n  var bytesToUpload = bytesLeft;\n\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n\n  var startByte = status_.current;\n  var endByte = startByte + bytesToUpload;\n  var uploadCommand = '';\n\n  if (bytesToUpload === 0) {\n    uploadCommand = 'finalize';\n  } else if (bytesLeft === bytesToUpload) {\n    uploadCommand = 'upload, finalize';\n  } else {\n    uploadCommand = 'upload';\n  }\n\n  var headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': \"\".concat(status_.current)\n  };\n  var body = blob.slice(startByte, endByte);\n\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(xhr, text) {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    var uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    var newCurrent = status_.current + bytesToUpload;\n    var size = blob.size();\n    var metadata;\n\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n\n    return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);\n  }\n\n  var method = 'POST';\n  var timeout = service.maxUploadRetryTime;\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An event that is triggered on a task.\r\n * @internal\r\n */\n\n\nvar TaskEvent = {\n  /**\r\n   * For this event,\r\n   * <ul>\r\n   *   <li>The `next` function is triggered on progress updates and when the\r\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\r\n   *       argument.</li>\r\n   *   <li>The `error` function is triggered if the upload is canceled or fails\r\n   *       for another reason.</li>\r\n   *   <li>The `complete` function is triggered if the upload completes\r\n   *       successfully.</li>\r\n   * </ul>\r\n   */\n  STATE_CHANGED: 'state_changed'\n}; // type keys = keyof TaskState\n\n/**\r\n * Represents the current state of a running upload.\r\n * @internal\r\n */\n\nvar TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n\n  /** The task failed with an error. */\n  ERROR: 'error'\n};\n\nfunction taskStateFromInternalTaskState(state) {\n  switch (state) {\n    case \"running\"\n    /* InternalTaskState.RUNNING */\n    :\n    case \"pausing\"\n    /* InternalTaskState.PAUSING */\n    :\n    case \"canceling\"\n    /* InternalTaskState.CANCELING */\n    :\n      return TaskState.RUNNING;\n\n    case \"paused\"\n    /* InternalTaskState.PAUSED */\n    :\n      return TaskState.PAUSED;\n\n    case \"success\"\n    /* InternalTaskState.SUCCESS */\n    :\n      return TaskState.SUCCESS;\n\n    case \"canceled\"\n    /* InternalTaskState.CANCELED */\n    :\n      return TaskState.CANCELED;\n\n    case \"error\"\n    /* InternalTaskState.ERROR */\n    :\n      return TaskState.ERROR;\n\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar Observer = /*#__PURE__*/_createClass(function Observer(nextOrObserver, error, complete) {\n  _classCallCheck(this, Observer);\n\n  var asFunctions = isFunction(nextOrObserver) || error != null || complete != null;\n\n  if (asFunctions) {\n    this.next = nextOrObserver;\n    this.error = error !== null && error !== void 0 ? error : undefined;\n    this.complete = complete !== null && complete !== void 0 ? complete : undefined;\n  } else {\n    var observer = nextOrObserver;\n    this.next = observer.next;\n    this.error = observer.error;\n    this.complete = observer.complete;\n  }\n});\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns a function that invokes f with its arguments asynchronously as a\r\n * microtask, i.e. as soon as possible after the current script returns back\r\n * into browser code.\r\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\n\n\nfunction async(f) {\n  return function () {\n    for (var _len5 = arguments.length, argsToForward = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      argsToForward[_key5] = arguments[_key5];\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(function () {\n      return f.apply(void 0, argsToForward);\n    });\n  };\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** An override for the text-based Connection. Used in tests. */\n\n\nvar textFactoryOverride = null;\n/**\r\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\r\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\r\n */\n\nvar XhrConnection = /*#__PURE__*/function () {\n  function XhrConnection() {\n    var _this4 = this;\n\n    _classCallCheck(this, XhrConnection);\n\n    this.sent_ = false;\n    this.xhr_ = new XMLHttpRequest();\n    this.initXhr();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(function (resolve) {\n      _this4.xhr_.addEventListener('abort', function () {\n        _this4.errorCode_ = ErrorCode.ABORT;\n        resolve();\n      });\n\n      _this4.xhr_.addEventListener('error', function () {\n        _this4.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve();\n      });\n\n      _this4.xhr_.addEventListener('load', function () {\n        resolve();\n      });\n    });\n  }\n\n  _createClass(XhrConnection, [{\n    key: \"send\",\n    value: function send(url, method, body, headers) {\n      if (this.sent_) {\n        throw internalError('cannot .send() more than once');\n      }\n\n      this.sent_ = true;\n      this.xhr_.open(method, url, true);\n\n      if (headers !== undefined) {\n        for (var key in headers) {\n          if (headers.hasOwnProperty(key)) {\n            this.xhr_.setRequestHeader(key, headers[key].toString());\n          }\n        }\n      }\n\n      if (body !== undefined) {\n        this.xhr_.send(body);\n      } else {\n        this.xhr_.send();\n      }\n\n      return this.sendPromise_;\n    }\n  }, {\n    key: \"getErrorCode\",\n    value: function getErrorCode() {\n      if (!this.sent_) {\n        throw internalError('cannot .getErrorCode() before sending');\n      }\n\n      return this.errorCode_;\n    }\n  }, {\n    key: \"getStatus\",\n    value: function getStatus() {\n      if (!this.sent_) {\n        throw internalError('cannot .getStatus() before sending');\n      }\n\n      try {\n        return this.xhr_.status;\n      } catch (e) {\n        return -1;\n      }\n    }\n  }, {\n    key: \"getResponse\",\n    value: function getResponse() {\n      if (!this.sent_) {\n        throw internalError('cannot .getResponse() before sending');\n      }\n\n      return this.xhr_.response;\n    }\n  }, {\n    key: \"getErrorText\",\n    value: function getErrorText() {\n      if (!this.sent_) {\n        throw internalError('cannot .getErrorText() before sending');\n      }\n\n      return this.xhr_.statusText;\n    }\n    /** Aborts the request. */\n\n  }, {\n    key: \"abort\",\n    value: function abort() {\n      this.xhr_.abort();\n    }\n  }, {\n    key: \"getResponseHeader\",\n    value: function getResponseHeader(header) {\n      return this.xhr_.getResponseHeader(header);\n    }\n  }, {\n    key: \"addUploadProgressListener\",\n    value: function addUploadProgressListener(listener) {\n      if (this.xhr_.upload != null) {\n        this.xhr_.upload.addEventListener('progress', listener);\n      }\n    }\n  }, {\n    key: \"removeUploadProgressListener\",\n    value: function removeUploadProgressListener(listener) {\n      if (this.xhr_.upload != null) {\n        this.xhr_.upload.removeEventListener('progress', listener);\n      }\n    }\n  }]);\n\n  return XhrConnection;\n}();\n\nvar XhrTextConnection = /*#__PURE__*/function (_XhrConnection) {\n  _inherits(XhrTextConnection, _XhrConnection);\n\n  var _super2 = _createSuper(XhrTextConnection);\n\n  function XhrTextConnection() {\n    _classCallCheck(this, XhrTextConnection);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(XhrTextConnection, [{\n    key: \"initXhr\",\n    value: function initXhr() {\n      this.xhr_.responseType = 'text';\n    }\n  }]);\n\n  return XhrTextConnection;\n}(XhrConnection);\n\nfunction newTextConnection() {\n  return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\n}\n\nvar XhrBytesConnection = /*#__PURE__*/function (_XhrConnection2) {\n  _inherits(XhrBytesConnection, _XhrConnection2);\n\n  var _super3 = _createSuper(XhrBytesConnection);\n\n  function XhrBytesConnection() {\n    _classCallCheck(this, XhrBytesConnection);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(XhrBytesConnection, [{\n    key: \"initXhr\",\n    value: function initXhr() {\n      this.xhr_.responseType = 'arraybuffer';\n    }\n  }]);\n\n  return XhrBytesConnection;\n}(XhrConnection);\n\nfunction newBytesConnection() {\n  return new XhrBytesConnection();\n}\n\nvar XhrBlobConnection = /*#__PURE__*/function (_XhrConnection3) {\n  _inherits(XhrBlobConnection, _XhrConnection3);\n\n  var _super4 = _createSuper(XhrBlobConnection);\n\n  function XhrBlobConnection() {\n    _classCallCheck(this, XhrBlobConnection);\n\n    return _super4.apply(this, arguments);\n  }\n\n  _createClass(XhrBlobConnection, [{\n    key: \"initXhr\",\n    value: function initXhr() {\n      this.xhr_.responseType = 'blob';\n    }\n  }]);\n\n  return XhrBlobConnection;\n}(XhrConnection);\n\nfunction newBlobConnection() {\n  return new XhrBlobConnection();\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\r\n * upload and manage callbacks for various events.\r\n * @internal\r\n */\n\n\nvar UploadTask = /*#__PURE__*/function () {\n  /**\r\n   * @param ref - The firebaseStorage.Reference object this task came\r\n   *     from, untyped to avoid cyclic dependencies.\r\n   * @param blob - The blob to upload.\r\n   */\n  function UploadTask(ref, blob) {\n    var _this5 = this;\n\n    var metadata = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    _classCallCheck(this, UploadTask);\n\n    /**\r\n     * Number of bytes transferred so far.\r\n     */\n    this._transferred = 0;\n    this._needToFetchStatus = false;\n    this._needToFetchMetadata = false;\n    this._observers = [];\n    this._error = undefined;\n    this._uploadUrl = undefined;\n    this._request = undefined;\n    this._chunkMultiplier = 1;\n    this._resolve = undefined;\n    this._reject = undefined;\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = \"running\"\n    /* InternalTaskState.RUNNING */\n    ;\n\n    this._errorHandler = function (error) {\n      _this5._request = undefined;\n      _this5._chunkMultiplier = 1;\n\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        _this5._needToFetchStatus = true;\n\n        _this5.completeTransitions_();\n      } else {\n        var backoffExpired = _this5.isExponentialBackoffExpired();\n\n        if (isRetryStatusCode(error.status, [])) {\n          if (backoffExpired) {\n            error = retryLimitExceeded();\n          } else {\n            _this5.sleepTime = Math.max(_this5.sleepTime * 2, DEFAULT_MIN_SLEEP_TIME_MILLIS);\n            _this5._needToFetchStatus = true;\n\n            _this5.completeTransitions_();\n\n            return;\n          }\n        }\n\n        _this5._error = error;\n\n        _this5._transition(\"error\"\n        /* InternalTaskState.ERROR */\n        );\n      }\n    };\n\n    this._metadataErrorHandler = function (error) {\n      _this5._request = undefined;\n\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        _this5.completeTransitions_();\n      } else {\n        _this5._error = error;\n\n        _this5._transition(\"error\"\n        /* InternalTaskState.ERROR */\n        );\n      }\n    };\n\n    this.sleepTime = 0;\n    this.maxSleepTime = this._ref.storage.maxUploadRetryTime;\n    this._promise = new Promise(function (resolve, reject) {\n      _this5._resolve = resolve;\n      _this5._reject = reject;\n\n      _this5._start();\n    }); // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n\n    this._promise.then(null, function () {});\n  }\n\n  _createClass(UploadTask, [{\n    key: \"isExponentialBackoffExpired\",\n    value: function isExponentialBackoffExpired() {\n      return this.sleepTime > this.maxSleepTime;\n    }\n  }, {\n    key: \"_makeProgressCallback\",\n    value: function _makeProgressCallback() {\n      var _this6 = this;\n\n      var sizeBefore = this._transferred;\n      return function (loaded) {\n        return _this6._updateProgress(sizeBefore + loaded);\n      };\n    }\n  }, {\n    key: \"_shouldDoResumable\",\n    value: function _shouldDoResumable(blob) {\n      return blob.size() > 256 * 1024;\n    }\n  }, {\n    key: \"_start\",\n    value: function _start() {\n      var _this7 = this;\n\n      if (this._state !== \"running\"\n      /* InternalTaskState.RUNNING */\n      ) {\n        // This can happen if someone pauses us in a resume callback, for example.\n        return;\n      }\n\n      if (this._request !== undefined) {\n        return;\n      }\n\n      if (this._resumable) {\n        if (this._uploadUrl === undefined) {\n          this._createResumable();\n        } else {\n          if (this._needToFetchStatus) {\n            this._fetchStatus();\n          } else {\n            if (this._needToFetchMetadata) {\n              // Happens if we miss the metadata on upload completion.\n              this._fetchMetadata();\n            } else {\n              this.pendingTimeout = setTimeout(function () {\n                _this7.pendingTimeout = undefined;\n\n                _this7._continueUpload();\n              }, this.sleepTime);\n            }\n          }\n        }\n      } else {\n        this._oneShotUpload();\n      }\n    }\n  }, {\n    key: \"_resolveToken\",\n    value: function _resolveToken(callback) {\n      var _this8 = this;\n\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      Promise.all([this._ref.storage._getAuthToken(), this._ref.storage._getAppCheckToken()]).then(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            authToken = _ref2[0],\n            appCheckToken = _ref2[1];\n\n        switch (_this8._state) {\n          case \"running\"\n          /* InternalTaskState.RUNNING */\n          :\n            callback(authToken, appCheckToken);\n            break;\n\n          case \"canceling\"\n          /* InternalTaskState.CANCELING */\n          :\n            _this8._transition(\"canceled\"\n            /* InternalTaskState.CANCELED */\n            );\n\n            break;\n\n          case \"pausing\"\n          /* InternalTaskState.PAUSING */\n          :\n            _this8._transition(\"paused\"\n            /* InternalTaskState.PAUSED */\n            );\n\n            break;\n        }\n      });\n    } // TODO(andysoto): assert false\n\n  }, {\n    key: \"_createResumable\",\n    value: function _createResumable() {\n      var _this9 = this;\n\n      this._resolveToken(function (authToken, appCheckToken) {\n        var requestInfo = createResumableUpload(_this9._ref.storage, _this9._ref._location, _this9._mappings, _this9._blob, _this9._metadata);\n\n        var createRequest = _this9._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n\n        _this9._request = createRequest;\n        createRequest.getPromise().then(function (url) {\n          _this9._request = undefined;\n          _this9._uploadUrl = url;\n          _this9._needToFetchStatus = false;\n\n          _this9.completeTransitions_();\n        }, _this9._errorHandler);\n      });\n    }\n  }, {\n    key: \"_fetchStatus\",\n    value: function _fetchStatus() {\n      var _this10 = this;\n\n      // TODO(andysoto): assert(this.uploadUrl_ !== null);\n      var url = this._uploadUrl;\n\n      this._resolveToken(function (authToken, appCheckToken) {\n        var requestInfo = getResumableUploadStatus(_this10._ref.storage, _this10._ref._location, url, _this10._blob);\n\n        var statusRequest = _this10._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n\n        _this10._request = statusRequest;\n        statusRequest.getPromise().then(function (status) {\n          status = status;\n          _this10._request = undefined;\n\n          _this10._updateProgress(status.current);\n\n          _this10._needToFetchStatus = false;\n\n          if (status.finalized) {\n            _this10._needToFetchMetadata = true;\n          }\n\n          _this10.completeTransitions_();\n        }, _this10._errorHandler);\n      });\n    }\n  }, {\n    key: \"_continueUpload\",\n    value: function _continueUpload() {\n      var _this11 = this;\n\n      var chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n      var status = new ResumableUploadStatus(this._transferred, this._blob.size()); // TODO(andysoto): assert(this.uploadUrl_ !== null);\n\n      var url = this._uploadUrl;\n\n      this._resolveToken(function (authToken, appCheckToken) {\n        var requestInfo;\n\n        try {\n          requestInfo = continueResumableUpload(_this11._ref._location, _this11._ref.storage, url, _this11._blob, chunkSize, _this11._mappings, status, _this11._makeProgressCallback());\n        } catch (e) {\n          _this11._error = e;\n\n          _this11._transition(\"error\"\n          /* InternalTaskState.ERROR */\n          );\n\n          return;\n        }\n\n        var uploadRequest = _this11._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken,\n        /*retry=*/\n        false // Upload requests should not be retried as each retry should be preceded by another query request. Which is handled in this file.\n        );\n\n        _this11._request = uploadRequest;\n        uploadRequest.getPromise().then(function (newStatus) {\n          _this11._increaseMultiplier();\n\n          _this11._request = undefined;\n\n          _this11._updateProgress(newStatus.current);\n\n          if (newStatus.finalized) {\n            _this11._metadata = newStatus.metadata;\n\n            _this11._transition(\"success\"\n            /* InternalTaskState.SUCCESS */\n            );\n          } else {\n            _this11.completeTransitions_();\n          }\n        }, _this11._errorHandler);\n      });\n    }\n  }, {\n    key: \"_increaseMultiplier\",\n    value: function _increaseMultiplier() {\n      var currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier; // Max chunk size is 32M.\n\n      if (currentSize * 2 < 32 * 1024 * 1024) {\n        this._chunkMultiplier *= 2;\n      }\n    }\n  }, {\n    key: \"_fetchMetadata\",\n    value: function _fetchMetadata() {\n      var _this12 = this;\n\n      this._resolveToken(function (authToken, appCheckToken) {\n        var requestInfo = getMetadata$2(_this12._ref.storage, _this12._ref._location, _this12._mappings);\n\n        var metadataRequest = _this12._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n\n        _this12._request = metadataRequest;\n        metadataRequest.getPromise().then(function (metadata) {\n          _this12._request = undefined;\n          _this12._metadata = metadata;\n\n          _this12._transition(\"success\"\n          /* InternalTaskState.SUCCESS */\n          );\n        }, _this12._metadataErrorHandler);\n      });\n    }\n  }, {\n    key: \"_oneShotUpload\",\n    value: function _oneShotUpload() {\n      var _this13 = this;\n\n      this._resolveToken(function (authToken, appCheckToken) {\n        var requestInfo = multipartUpload(_this13._ref.storage, _this13._ref._location, _this13._mappings, _this13._blob, _this13._metadata);\n\n        var multipartRequest = _this13._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n\n        _this13._request = multipartRequest;\n        multipartRequest.getPromise().then(function (metadata) {\n          _this13._request = undefined;\n          _this13._metadata = metadata;\n\n          _this13._updateProgress(_this13._blob.size());\n\n          _this13._transition(\"success\"\n          /* InternalTaskState.SUCCESS */\n          );\n        }, _this13._errorHandler);\n      });\n    }\n  }, {\n    key: \"_updateProgress\",\n    value: function _updateProgress(transferred) {\n      var old = this._transferred;\n      this._transferred = transferred; // A progress update can make the \"transferred\" value smaller (e.g. a\n      // partial upload not completed by server, after which the \"transferred\"\n      // value may reset to the value at the beginning of the request).\n\n      if (this._transferred !== old) {\n        this._notifyObservers();\n      }\n    }\n  }, {\n    key: \"_transition\",\n    value: function _transition(state) {\n      if (this._state === state) {\n        return;\n      }\n\n      switch (state) {\n        case \"canceling\"\n        /* InternalTaskState.CANCELING */\n        :\n        case \"pausing\"\n        /* InternalTaskState.PAUSING */\n        :\n          // TODO(andysoto):\n          // assert(this.state_ === InternalTaskState.RUNNING ||\n          //        this.state_ === InternalTaskState.PAUSING);\n          this._state = state;\n\n          if (this._request !== undefined) {\n            this._request.cancel();\n          } else if (this.pendingTimeout) {\n            clearTimeout(this.pendingTimeout);\n            this.pendingTimeout = undefined;\n            this.completeTransitions_();\n          }\n\n          break;\n\n        case \"running\"\n        /* InternalTaskState.RUNNING */\n        :\n          // TODO(andysoto):\n          // assert(this.state_ === InternalTaskState.PAUSED ||\n          //        this.state_ === InternalTaskState.PAUSING);\n          var wasPaused = this._state === \"paused\"\n          /* InternalTaskState.PAUSED */\n          ;\n          this._state = state;\n\n          if (wasPaused) {\n            this._notifyObservers();\n\n            this._start();\n          }\n\n          break;\n\n        case \"paused\"\n        /* InternalTaskState.PAUSED */\n        :\n          // TODO(andysoto):\n          // assert(this.state_ === InternalTaskState.PAUSING);\n          this._state = state;\n\n          this._notifyObservers();\n\n          break;\n\n        case \"canceled\"\n        /* InternalTaskState.CANCELED */\n        :\n          // TODO(andysoto):\n          // assert(this.state_ === InternalTaskState.PAUSED ||\n          //        this.state_ === InternalTaskState.CANCELING);\n          this._error = canceled();\n          this._state = state;\n\n          this._notifyObservers();\n\n          break;\n\n        case \"error\"\n        /* InternalTaskState.ERROR */\n        :\n          // TODO(andysoto):\n          // assert(this.state_ === InternalTaskState.RUNNING ||\n          //        this.state_ === InternalTaskState.PAUSING ||\n          //        this.state_ === InternalTaskState.CANCELING);\n          this._state = state;\n\n          this._notifyObservers();\n\n          break;\n\n        case \"success\"\n        /* InternalTaskState.SUCCESS */\n        :\n          // TODO(andysoto):\n          // assert(this.state_ === InternalTaskState.RUNNING ||\n          //        this.state_ === InternalTaskState.PAUSING ||\n          //        this.state_ === InternalTaskState.CANCELING);\n          this._state = state;\n\n          this._notifyObservers();\n\n          break;\n      }\n    }\n  }, {\n    key: \"completeTransitions_\",\n    value: function completeTransitions_() {\n      switch (this._state) {\n        case \"pausing\"\n        /* InternalTaskState.PAUSING */\n        :\n          this._transition(\"paused\"\n          /* InternalTaskState.PAUSED */\n          );\n\n          break;\n\n        case \"canceling\"\n        /* InternalTaskState.CANCELING */\n        :\n          this._transition(\"canceled\"\n          /* InternalTaskState.CANCELED */\n          );\n\n          break;\n\n        case \"running\"\n        /* InternalTaskState.RUNNING */\n        :\n          this._start();\n\n          break;\n      }\n    }\n    /**\r\n     * A snapshot of the current task state.\r\n     */\n\n  }, {\n    key: \"snapshot\",\n    get: function get() {\n      var externalState = taskStateFromInternalTaskState(this._state);\n      return {\n        bytesTransferred: this._transferred,\n        totalBytes: this._blob.size(),\n        state: externalState,\n        metadata: this._metadata,\n        task: this,\n        ref: this._ref\n      };\n    }\n    /**\r\n     * Adds a callback for an event.\r\n     * @param type - The type of event to listen for.\r\n     * @param nextOrObserver -\r\n     *     The `next` function, which gets called for each item in\r\n     *     the event stream, or an observer object with some or all of these three\r\n     *     properties (`next`, `error`, `complete`).\r\n     * @param error - A function that gets called with a `StorageError`\r\n     *     if the event stream ends due to an error.\r\n     * @param completed - A function that gets called if the\r\n     *     event stream ends normally.\r\n     * @returns\r\n     *     If only the event argument is passed, returns a function you can use to\r\n     *     add callbacks (see the examples above). If more than just the event\r\n     *     argument is passed, returns a function you can call to unregister the\r\n     *     callbacks.\r\n     */\n\n  }, {\n    key: \"on\",\n    value: function on(type, nextOrObserver, error, completed) {\n      var _this14 = this;\n\n      // Note: `type` isn't being used. Its type is also incorrect. TaskEvent should not be a string.\n      var observer = new Observer(nextOrObserver || undefined, error || undefined, completed || undefined);\n\n      this._addObserver(observer);\n\n      return function () {\n        _this14._removeObserver(observer);\n      };\n    }\n    /**\r\n     * This object behaves like a Promise, and resolves with its snapshot data\r\n     * when the upload completes.\r\n     * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\r\n     * @param onRejected - The rejection callback.\r\n     */\n\n  }, {\n    key: \"then\",\n    value: function then(onFulfilled, onRejected) {\n      // These casts are needed so that TypeScript can infer the types of the\n      // resulting Promise.\n      return this._promise.then(onFulfilled, onRejected);\n    }\n    /**\r\n     * Equivalent to calling `then(null, onRejected)`.\r\n     */\n\n  }, {\n    key: \"catch\",\n    value: function _catch(onRejected) {\n      return this.then(null, onRejected);\n    }\n    /**\r\n     * Adds the given observer.\r\n     */\n\n  }, {\n    key: \"_addObserver\",\n    value: function _addObserver(observer) {\n      this._observers.push(observer);\n\n      this._notifyObserver(observer);\n    }\n    /**\r\n     * Removes the given observer.\r\n     */\n\n  }, {\n    key: \"_removeObserver\",\n    value: function _removeObserver(observer) {\n      var i = this._observers.indexOf(observer);\n\n      if (i !== -1) {\n        this._observers.splice(i, 1);\n      }\n    }\n  }, {\n    key: \"_notifyObservers\",\n    value: function _notifyObservers() {\n      var _this15 = this;\n\n      this._finishPromise();\n\n      var observers = this._observers.slice();\n\n      observers.forEach(function (observer) {\n        _this15._notifyObserver(observer);\n      });\n    }\n  }, {\n    key: \"_finishPromise\",\n    value: function _finishPromise() {\n      if (this._resolve !== undefined) {\n        var triggered = true;\n\n        switch (taskStateFromInternalTaskState(this._state)) {\n          case TaskState.SUCCESS:\n            async(this._resolve.bind(null, this.snapshot))();\n            break;\n\n          case TaskState.CANCELED:\n          case TaskState.ERROR:\n            var toCall = this._reject;\n            async(toCall.bind(null, this._error))();\n            break;\n\n          default:\n            triggered = false;\n            break;\n        }\n\n        if (triggered) {\n          this._resolve = undefined;\n          this._reject = undefined;\n        }\n      }\n    }\n  }, {\n    key: \"_notifyObserver\",\n    value: function _notifyObserver(observer) {\n      var externalState = taskStateFromInternalTaskState(this._state);\n\n      switch (externalState) {\n        case TaskState.RUNNING:\n        case TaskState.PAUSED:\n          if (observer.next) {\n            async(observer.next.bind(observer, this.snapshot))();\n          }\n\n          break;\n\n        case TaskState.SUCCESS:\n          if (observer.complete) {\n            async(observer.complete.bind(observer))();\n          }\n\n          break;\n\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          if (observer.error) {\n            async(observer.error.bind(observer, this._error))();\n          }\n\n          break;\n\n        default:\n          // TODO(andysoto): assert(false);\n          if (observer.error) {\n            async(observer.error.bind(observer, this._error))();\n          }\n\n      }\n    }\n    /**\r\n     * Resumes a paused task. Has no effect on a currently running or failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\n\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      var valid = this._state === \"paused\"\n      /* InternalTaskState.PAUSED */\n      || this._state === \"pausing\"\n      /* InternalTaskState.PAUSING */\n      ;\n\n      if (valid) {\n        this._transition(\"running\"\n        /* InternalTaskState.RUNNING */\n        );\n      }\n\n      return valid;\n    }\n    /**\r\n     * Pauses a currently running task. Has no effect on a paused or failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\n\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      var valid = this._state === \"running\"\n      /* InternalTaskState.RUNNING */\n      ;\n\n      if (valid) {\n        this._transition(\"pausing\"\n        /* InternalTaskState.PAUSING */\n        );\n      }\n\n      return valid;\n    }\n    /**\r\n     * Cancels a currently running or paused task. Has no effect on a complete or\r\n     * failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      var valid = this._state === \"running\"\n      /* InternalTaskState.RUNNING */\n      || this._state === \"pausing\"\n      /* InternalTaskState.PAUSING */\n      ;\n\n      if (valid) {\n        this._transition(\"canceling\"\n        /* InternalTaskState.CANCELING */\n        );\n      }\n\n      return valid;\n    }\n  }]);\n\n  return UploadTask;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Provides methods to interact with a bucket in the Firebase Storage service.\r\n * @internal\r\n * @param _location - An fbs.location, or the URL at\r\n *     which to base this object, in one of the following forms:\r\n *         gs://<bucket>/<object-path>\r\n *         http[s]://firebasestorage.googleapis.com/\r\n *                     <api-version>/b/<bucket>/o/<object-path>\r\n *     Any query or fragment strings will be ignored in the http[s]\r\n *     format. If no value is passed, the storage object will use a URL based on\r\n *     the project ID of the base firebase.App instance.\r\n */\n\n\nvar Reference = /*#__PURE__*/function () {\n  function Reference(_service, location) {\n    _classCallCheck(this, Reference);\n\n    this._service = _service;\n\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n  /**\r\n   * Returns the URL for the bucket and path this object references,\r\n   *     in the form gs://<bucket>/<object-path>\r\n   * @override\r\n   */\n\n\n  _createClass(Reference, [{\n    key: \"toString\",\n    value: function toString() {\n      return 'gs://' + this._location.bucket + '/' + this._location.path;\n    }\n  }, {\n    key: \"_newRef\",\n    value: function _newRef(service, location) {\n      return new Reference(service, location);\n    }\n    /**\r\n     * A reference to the root of this object's bucket.\r\n     */\n\n  }, {\n    key: \"root\",\n    get: function get() {\n      var location = new Location(this._location.bucket, '');\n      return this._newRef(this._service, location);\n    }\n    /**\r\n     * The name of the bucket containing this reference's object.\r\n     */\n\n  }, {\n    key: \"bucket\",\n    get: function get() {\n      return this._location.bucket;\n    }\n    /**\r\n     * The full path of this object.\r\n     */\n\n  }, {\n    key: \"fullPath\",\n    get: function get() {\n      return this._location.path;\n    }\n    /**\r\n     * The short name of this object, which is the last component of the full path.\r\n     * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\r\n     */\n\n  }, {\n    key: \"name\",\n    get: function get() {\n      return lastComponent(this._location.path);\n    }\n    /**\r\n     * The `StorageService` instance this `StorageReference` is associated with.\r\n     */\n\n  }, {\n    key: \"storage\",\n    get: function get() {\n      return this._service;\n    }\n    /**\r\n     * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\r\n     * this reference is the root.\r\n     */\n\n  }, {\n    key: \"parent\",\n    get: function get() {\n      var newPath = parent(this._location.path);\n\n      if (newPath === null) {\n        return null;\n      }\n\n      var location = new Location(this._location.bucket, newPath);\n      return new Reference(this._service, location);\n    }\n    /**\r\n     * Utility function to throw an error in methods that do not accept a root reference.\r\n     */\n\n  }, {\n    key: \"_throwIfRoot\",\n    value: function _throwIfRoot(name) {\n      if (this._location.path === '') {\n        throw invalidRootOperation(name);\n      }\n    }\n  }]);\n\n  return Reference;\n}();\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded bytes.\r\n */\n\n\nfunction getBytesInternal(ref, maxDownloadSizeBytes) {\n  ref._throwIfRoot('getBytes');\n\n  var requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\n  return ref.storage.makeRequestWithTokens(requestInfo, newBytesConnection).then(function (bytes) {\n    return maxDownloadSizeBytes !== undefined ? // GCS may not honor the Range header for small files\n    bytes.slice(0, maxDownloadSizeBytes) : bytes;\n  });\n}\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded blob.\r\n */\n\n\nfunction getBlobInternal(ref, maxDownloadSizeBytes) {\n  ref._throwIfRoot('getBlob');\n\n  var requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\n  return ref.storage.makeRequestWithTokens(requestInfo, newBlobConnection).then(function (blob) {\n    return maxDownloadSizeBytes !== undefined ? // GCS may not honor the Range header for small files\n    blob.slice(0, maxDownloadSizeBytes) : blob;\n  });\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n *\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns A Promise containing an UploadResult\r\n */\n\n\nfunction uploadBytes$1(ref, data, metadata) {\n  ref._throwIfRoot('uploadBytes');\n\n  var requestInfo = multipartUpload(ref.storage, ref._location, getMappings(), new FbsBlob(data, true), metadata);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection).then(function (finalMetadata) {\n    return {\n      metadata: finalMetadata,\n      ref: ref\n    };\n  });\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns An UploadTask\r\n */\n\n\nfunction uploadBytesResumable$1(ref, data, metadata) {\n  ref._throwIfRoot('uploadBytesResumable');\n\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - StorageReference where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the newly uploaded string.\r\n * @returns A Promise containing an UploadResult\r\n */\n\n\nfunction uploadString$1(ref, value) {\n  var format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : StringFormat.RAW;\n  var metadata = arguments.length > 3 ? arguments[3] : undefined;\n\n  ref._throwIfRoot('uploadString');\n\n  var data = dataFromString(format, value);\n  var metadataClone = Object.assign({}, metadata);\n\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType;\n  }\n\n  return uploadBytes$1(ref, data.data, metadataClone);\n}\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: listAll may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - StorageReference to get list from.\r\n *\r\n * @returns A Promise that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\n\n\nfunction listAll$1(ref) {\n  var accumulator = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(function () {\n    return accumulator;\n  });\n}\n/**\r\n * Separated from listAll because async functions can't use \"arguments\".\r\n * @param ref\r\n * @param accumulator\r\n * @param pageToken\r\n */\n\n\nfunction listAllHelper(_x, _x2, _x3) {\n  return _listAllHelper.apply(this, arguments);\n}\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - StorageReference to get list from.\r\n * @param options - See ListOptions for details.\r\n * @returns A Promise that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\n\n\nfunction _listAllHelper() {\n  _listAllHelper = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(ref, accumulator, pageToken) {\n    var _accumulator$prefixes, _accumulator$items;\n\n    var opt, nextPage;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            opt = {\n              // maxResults is 1000 by default.\n              pageToken: pageToken\n            };\n            _context4.next = 3;\n            return list$1(ref, opt);\n\n          case 3:\n            nextPage = _context4.sent;\n\n            (_accumulator$prefixes = accumulator.prefixes).push.apply(_accumulator$prefixes, _toConsumableArray(nextPage.prefixes));\n\n            (_accumulator$items = accumulator.items).push.apply(_accumulator$items, _toConsumableArray(nextPage.items));\n\n            if (!(nextPage.nextPageToken != null)) {\n              _context4.next = 9;\n              break;\n            }\n\n            _context4.next = 9;\n            return listAllHelper(ref, accumulator, nextPage.nextPageToken);\n\n          case 9:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _listAllHelper.apply(this, arguments);\n}\n\nfunction list$1(ref, options) {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber('options.maxResults',\n      /* minValue= */\n      1,\n      /* maxValue= */\n      1000, options.maxResults);\n    }\n  }\n\n  var op = options || {};\n  var requestInfo = list$2(ref.storage, ref._location,\n  /*delimiter= */\n  '/', op.pageToken, op.maxResults);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - StorageReference to get metadata from.\r\n */\n\n\nfunction getMetadata$1(ref) {\n  ref._throwIfRoot('getMetadata');\n\n  var requestInfo = getMetadata$2(ref.storage, ref._location, getMappings());\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - StorageReference to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves\r\n *     with the new metadata for this object.\r\n *     See `firebaseStorage.Reference.prototype.getMetadata`\r\n */\n\n\nfunction updateMetadata$1(ref, metadata) {\n  ref._throwIfRoot('updateMetadata');\n\n  var requestInfo = updateMetadata$2(ref.storage, ref._location, metadata, getMappings());\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * Returns the download URL for the given Reference.\r\n * @public\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\n\n\nfunction getDownloadURL$1(ref) {\n  ref._throwIfRoot('getDownloadURL');\n\n  var requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection).then(function (url) {\n    if (url === null) {\n      throw noDownloadURL();\n    }\n\n    return url;\n  });\n}\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - StorageReference for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\n\n\nfunction deleteObject$1(ref) {\n  ref._throwIfRoot('deleteObject');\n\n  var requestInfo = deleteObject$2(ref.storage, ref._location);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * Returns reference for object obtained by appending `childPath` to `ref`.\r\n *\r\n * @param ref - StorageReference to get child of.\r\n * @param childPath - Child path from provided ref.\r\n * @returns A reference to the object obtained by\r\n * appending childPath, removing any duplicate, beginning, or trailing\r\n * slashes.\r\n *\r\n */\n\n\nfunction _getChild$1(ref, childPath) {\n  var newPath = child(ref._location.path, childPath);\n  var location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction isUrl(path) {\n  return /^[A-Za-z]+:\\/\\//.test(path);\n}\n/**\r\n * Returns a firebaseStorage.Reference for the given url.\r\n */\n\n\nfunction refFromURL(service, url) {\n  return new Reference(service, url);\n}\n/**\r\n * Returns a firebaseStorage.Reference for the given path in the default\r\n * bucket.\r\n */\n\n\nfunction refFromPath(ref, path) {\n  if (ref instanceof FirebaseStorageImpl) {\n    var service = ref;\n\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n\n    var reference = new Reference(service, service._bucket);\n\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      return _getChild$1(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\nfunction ref$1(serviceOrRef, pathOrUrl) {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof FirebaseStorageImpl) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(host, config) {\n  var bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];\n\n  if (bucketString == null) {\n    return null;\n  }\n\n  return Location.makeFromBucketSpec(bucketString, host);\n}\n\nfunction connectStorageEmulator$1(storage, host, port) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  storage.host = \"\".concat(host, \":\").concat(port);\n  storage._protocol = 'http';\n  var mockUserToken = options.mockUserToken;\n\n  if (mockUserToken) {\n    storage._overrideAuthToken = typeof mockUserToken === 'string' ? mockUserToken : createMockUserToken(mockUserToken, storage.app.options.projectId);\n  }\n}\n/**\r\n * A service that provides Firebase Storage Reference instances.\r\n * @param opt_url - gs:// url to a custom Storage Bucket\r\n *\r\n * @internal\r\n */\n\n\nvar FirebaseStorageImpl = /*#__PURE__*/function () {\n  function FirebaseStorageImpl(\n  /**\r\n   * FirebaseApp associated with this StorageService instance.\r\n   */\n  app, _authProvider,\n  /**\r\n   * @internal\r\n   */\n  _appCheckProvider,\n  /**\r\n   * @internal\r\n   */\n  _url, _firebaseVersion) {\n    _classCallCheck(this, FirebaseStorageImpl);\n\n    this.app = app;\n    this._authProvider = _authProvider;\n    this._appCheckProvider = _appCheckProvider;\n    this._url = _url;\n    this._firebaseVersion = _firebaseVersion;\n    this._bucket = null;\n    /**\r\n     * This string can be in the formats:\r\n     * - host\r\n     * - host:port\r\n     */\n\n    this._host = DEFAULT_HOST;\n    this._protocol = 'https';\n    this._appId = null;\n    this._deleted = false;\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n  /**\r\n   * The host string for this service, in the form of `host` or\r\n   * `host:port`.\r\n   */\n\n\n  _createClass(FirebaseStorageImpl, [{\n    key: \"host\",\n    get: function get() {\n      return this._host;\n    },\n    set: function set(host) {\n      this._host = host;\n\n      if (this._url != null) {\n        this._bucket = Location.makeFromBucketSpec(this._url, host);\n      } else {\n        this._bucket = extractBucket(host, this.app.options);\n      }\n    }\n    /**\r\n     * The maximum time to retry uploads in milliseconds.\r\n     */\n\n  }, {\n    key: \"maxUploadRetryTime\",\n    get: function get() {\n      return this._maxUploadRetryTime;\n    },\n    set: function set(time) {\n      validateNumber('time',\n      /* minValue=*/\n      0,\n      /* maxValue= */\n      Number.POSITIVE_INFINITY, time);\n      this._maxUploadRetryTime = time;\n    }\n    /**\r\n     * The maximum time to retry operations other than uploads or downloads in\r\n     * milliseconds.\r\n     */\n\n  }, {\n    key: \"maxOperationRetryTime\",\n    get: function get() {\n      return this._maxOperationRetryTime;\n    },\n    set: function set(time) {\n      validateNumber('time',\n      /* minValue=*/\n      0,\n      /* maxValue= */\n      Number.POSITIVE_INFINITY, time);\n      this._maxOperationRetryTime = time;\n    }\n  }, {\n    key: \"_getAuthToken\",\n    value: function () {\n      var _getAuthToken2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var auth, tokenData;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this._overrideAuthToken) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", this._overrideAuthToken);\n\n              case 2:\n                auth = this._authProvider.getImmediate({\n                  optional: true\n                });\n\n                if (!auth) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 6;\n                return auth.getToken();\n\n              case 6:\n                tokenData = _context.sent;\n\n                if (!(tokenData !== null)) {\n                  _context.next = 9;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", tokenData.accessToken);\n\n              case 9:\n                return _context.abrupt(\"return\", null);\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _getAuthToken() {\n        return _getAuthToken2.apply(this, arguments);\n      }\n\n      return _getAuthToken;\n    }()\n  }, {\n    key: \"_getAppCheckToken\",\n    value: function () {\n      var _getAppCheckToken2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var appCheck, result;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                appCheck = this._appCheckProvider.getImmediate({\n                  optional: true\n                });\n\n                if (!appCheck) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                _context2.next = 4;\n                return appCheck.getToken();\n\n              case 4:\n                result = _context2.sent;\n                return _context2.abrupt(\"return\", result.token);\n\n              case 6:\n                return _context2.abrupt(\"return\", null);\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _getAppCheckToken() {\n        return _getAppCheckToken2.apply(this, arguments);\n      }\n\n      return _getAppCheckToken;\n    }()\n    /**\r\n     * Stop running requests and prevent more from being created.\r\n     */\n\n  }, {\n    key: \"_delete\",\n    value: function _delete() {\n      if (!this._deleted) {\n        this._deleted = true;\n\n        this._requests.forEach(function (request) {\n          return request.cancel();\n        });\n\n        this._requests.clear();\n      }\n\n      return Promise.resolve();\n    }\n    /**\r\n     * Returns a new firebaseStorage.Reference object referencing this StorageService\r\n     * at the given Location.\r\n     */\n\n  }, {\n    key: \"_makeStorageReference\",\n    value: function _makeStorageReference(loc) {\n      return new Reference(this, loc);\n    }\n    /**\r\n     * @param requestInfo - HTTP RequestInfo object\r\n     * @param authToken - Firebase auth token\r\n     */\n\n  }, {\n    key: \"_makeRequest\",\n    value: function _makeRequest(requestInfo, requestFactory, authToken, appCheckToken) {\n      var _this16 = this;\n\n      var retry = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n\n      if (!this._deleted) {\n        var request = makeRequest(requestInfo, this._appId, authToken, appCheckToken, requestFactory, this._firebaseVersion, retry);\n\n        this._requests.add(request); // Request removes itself from set when complete.\n\n\n        request.getPromise().then(function () {\n          return _this16._requests.delete(request);\n        }, function () {\n          return _this16._requests.delete(request);\n        });\n        return request;\n      } else {\n        return new FailRequest(appDeleted());\n      }\n    }\n  }, {\n    key: \"makeRequestWithTokens\",\n    value: function () {\n      var _makeRequestWithTokens = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(requestInfo, requestFactory) {\n        var _yield$Promise$all, _yield$Promise$all2, authToken, appCheckToken;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return Promise.all([this._getAuthToken(), this._getAppCheckToken()]);\n\n              case 2:\n                _yield$Promise$all = _context3.sent;\n                _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n                authToken = _yield$Promise$all2[0];\n                appCheckToken = _yield$Promise$all2[1];\n                return _context3.abrupt(\"return\", this._makeRequest(requestInfo, requestFactory, authToken, appCheckToken).getPromise());\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function makeRequestWithTokens(_x4, _x5) {\n        return _makeRequestWithTokens.apply(this, arguments);\n      }\n\n      return makeRequestWithTokens;\n    }()\n  }]);\n\n  return FirebaseStorageImpl;\n}();\n\nvar name = \"@firebase/storage\";\nvar version = \"0.11.2\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Type constant for Firebase Storage.\r\n */\n\nvar STORAGE_TYPE = 'storage';\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise containing the object's bytes\r\n */\n\nfunction getBytes(ref, maxDownloadSizeBytes) {\n  ref = getModularInstance(ref);\n  return getBytesInternal(ref, maxDownloadSizeBytes);\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\n\n\nfunction uploadBytes(ref, data, metadata) {\n  ref = getModularInstance(ref);\n  return uploadBytes$1(ref, data, metadata);\n}\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the string to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\n\n\nfunction uploadString(ref, value, format, metadata) {\n  ref = getModularInstance(ref);\n  return uploadString$1(ref, value, format, metadata);\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns An UploadTask\r\n */\n\n\nfunction uploadBytesResumable(ref, data, metadata) {\n  ref = getModularInstance(ref);\n  return uploadBytesResumable$1(ref, data, metadata);\n}\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - {@link StorageReference} to get metadata from.\r\n */\n\n\nfunction getMetadata(ref) {\n  ref = getModularInstance(ref);\n  return getMetadata$1(ref);\n}\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - {@link StorageReference} to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves with the new metadata for this object.\r\n */\n\n\nfunction updateMetadata(ref, metadata) {\n  ref = getModularInstance(ref);\n  return updateMetadata$1(ref, metadata);\n}\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - {@link StorageReference} to get list from.\r\n * @param options - See {@link ListOptions} for details.\r\n * @returns A `Promise` that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\n\n\nfunction list(ref, options) {\n  ref = getModularInstance(ref);\n  return list$1(ref, options);\n}\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: `listAll` may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - {@link StorageReference} to get list from.\r\n *\r\n * @returns A `Promise` that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\n\n\nfunction listAll(ref) {\n  ref = getModularInstance(ref);\n  return listAll$1(ref);\n}\n/**\r\n * Returns the download URL for the given {@link StorageReference}.\r\n * @public\r\n * @param ref - {@link StorageReference} to get the download URL for.\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\n\n\nfunction getDownloadURL(ref) {\n  ref = getModularInstance(ref);\n  return getDownloadURL$1(ref);\n}\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - {@link StorageReference} for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\n\n\nfunction deleteObject(ref) {\n  ref = getModularInstance(ref);\n  return deleteObject$1(ref);\n}\n\nfunction ref(serviceOrRef, pathOrUrl) {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return ref$1(serviceOrRef, pathOrUrl);\n}\n/**\r\n * @internal\r\n */\n\n\nfunction _getChild(ref, childPath) {\n  return _getChild$1(ref, childPath);\n}\n/**\r\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\r\n * @public\r\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\r\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\r\n * If not passed, uses the app's default Storage Bucket.\r\n * @returns A {@link FirebaseStorage} instance.\r\n */\n\n\nfunction getStorage() {\n  var app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n  var bucketUrl = arguments.length > 1 ? arguments[1] : undefined;\n  app = getModularInstance(app);\n\n  var storageProvider = _getProvider(app, STORAGE_TYPE);\n\n  var storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  var emulator = getDefaultEmulatorHostnameAndPort('storage');\n\n  if (emulator) {\n    connectStorageEmulator.apply(void 0, [storageInstance].concat(_toConsumableArray(emulator)));\n  }\n\n  return storageInstance;\n}\n/**\r\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\r\n *\r\n * @param storage - The {@link FirebaseStorage} instance\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 5001)\r\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\r\n * token to use for unit testing Security Rules.\r\n * @public\r\n */\n\n\nfunction connectStorageEmulator(storage, host, port) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  connectStorageEmulator$1(storage, host, port, options);\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * This API is not available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise that resolves with a Blob containing the object's bytes\r\n */\n\n\nfunction getBlob(ref, maxDownloadSizeBytes) {\n  ref = getModularInstance(ref);\n  return getBlobInternal(ref, maxDownloadSizeBytes);\n}\n/**\r\n * Downloads the data at the object's location. Raises an error event if the\r\n * object is not found.\r\n *\r\n * This API is only available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A stream with the object's data as bytes\r\n */\n\n\nfunction getStream(ref, maxDownloadSizeBytes) {\n  throw new Error('getStream() is only supported by NodeJS builds');\n}\n/**\r\n * Cloud Storage for Firebase\r\n *\r\n * @packageDocumentation\r\n */\n\n\nfunction factory(container, _ref3) {\n  var url = _ref3.instanceIdentifier;\n  var app = container.getProvider('app').getImmediate();\n  var authProvider = container.getProvider('auth-internal');\n  var appCheckProvider = container.getProvider('app-check-internal');\n  return new FirebaseStorageImpl(app, authProvider, appCheckProvider, url, SDK_VERSION);\n}\n\nfunction registerStorage() {\n  _registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\"\n  /* ComponentType.PUBLIC */\n  ).setMultipleInstances(true)); //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\n\n\n  registerVersion(name, version, ''); // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n\n  registerVersion(name, version, 'esm2017');\n}\n\nregisterStorage();\nexport { StorageError, StorageErrorCode, StringFormat, FbsBlob as _FbsBlob, Location as _Location, TaskEvent as _TaskEvent, TaskState as _TaskState, UploadTask as _UploadTask, dataFromString as _dataFromString, _getChild, invalidArgument as _invalidArgument, invalidRootOperation as _invalidRootOperation, connectStorageEmulator, deleteObject, getBlob, getBytes, getDownloadURL, getMetadata, getStorage, getStream, list, listAll, ref, updateMetadata, uploadBytes, uploadBytesResumable, uploadString };","map":{"version":3,"mappings":"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","names":["DEFAULT_HOST","CONFIG_STORAGE_BUCKET_KEY","DEFAULT_MAX_OPERATION_RETRY_TIME","DEFAULT_MAX_UPLOAD_RETRY_TIME","DEFAULT_MIN_SLEEP_TIME_MILLIS","StorageError","code","message","status_","prependCode","serverResponse","_baseMessage","Object","setPrototypeOf","prototype","status","customData","FirebaseError","StorageErrorCode","unknown","UNKNOWN","objectNotFound","path","OBJECT_NOT_FOUND","quotaExceeded","bucket","QUOTA_EXCEEDED","unauthenticated","UNAUTHENTICATED","unauthorizedApp","UNAUTHORIZED_APP","unauthorized","UNAUTHORIZED","retryLimitExceeded","RETRY_LIMIT_EXCEEDED","canceled","CANCELED","invalidUrl","url","INVALID_URL","invalidDefaultBucket","INVALID_DEFAULT_BUCKET","noDefaultBucket","NO_DEFAULT_BUCKET","cannotSliceBlob","CANNOT_SLICE_BLOB","serverFileWrongSize","SERVER_FILE_WRONG_SIZE","noDownloadURL","NO_DOWNLOAD_URL","missingPolyFill","polyFill","UNSUPPORTED_ENVIRONMENT","invalidArgument","INVALID_ARGUMENT","appDeleted","APP_DELETED","invalidRootOperation","name","INVALID_ROOT_OPERATION","format","INVALID_FORMAT","internalError","INTERNAL_ERROR","Location","path_","length","encode","encodeURIComponent","bucketString","host","bucketLocation","makeFromUrl","e","location","bucketDomain","gsModify","loc","charAt","slice","gsPath","gsRegex","RegExp","gsIndices","httpModify","decodeURIComponent","version","firebaseStorageHost","replace","firebaseStoragePath","firebaseStorageRegExp","firebaseStorageIndices","cloudStorageHost","cloudStoragePath","cloudStorageRegExp","cloudStorageIndices","groups","regex","indices","postModify","i","group","captures","exec","bucketValue","pathValue","FailRequest","error","promise_","Promise","reject","_appDelete","start","doRequest","backoffCompleteCb","timeout","waitSeconds","retryTimeoutId","globalTimeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","args","apply","callWithDelay","millis","setTimeout","responseHandler","clearGlobalTimeout","clearTimeout","success","call","mustStop","waitMillis","Math","random","stopped","stop","wasTimeout","id","isJustDef","p","isFunction","isNonArrayObject","Array","isArray","isString","String","isNativeBlob","isNativeBlobDefined","Blob","isNode","validateNumber","argument","minValue","maxValue","value","makeUrl","urlPart","protocol","origin","makeQueryString","params","queryPart","key","hasOwnProperty","nextPart","ErrorCode","additionalRetryCodes","isFiveHundredCode","extraRetryCodes","isExtraRetryCode","indexOf","isAdditionalRetryCode","NetworkRequest","url_","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","timeout_","progressCallback_","connectionFactory_","retry","pendingConnection_","backoffId_","canceled_","appDelete_","resolve","resolve_","reject_","start_","doTheRequest","backoffCallback","RequestEndStatus","connection","progressListener","loaded","progressEvent","total","lengthComputable","addUploadProgressListener","send","then","removeUploadProgressListener","hitServer","getErrorCode","NO_ERROR","getStatus","isRetryStatusCode","wasCanceled","ABORT","successCode","backoffDone","requestWentThrough","wasSuccessCode","result","getResponse","err","getErrorText","appDelete","abort","headers","authToken","firebaseVersion","appId","appCheckToken","makeRequest","requestInfo","requestFactory","urlParams","assign","addGmpidHeader_","addAuthHeader_","addVersionHeader_","addAppCheckHeader_","method","body","successCodes","handler","errorHandler","progressCallback","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","undefined","bb","append","getBlob","sliceBlob","blob","end","webkitSlice","mozSlice","decodeBase64","encoded","atob","RAW","BASE64","BASE64URL","DATA_URL","StringData","data","contentType","stringData","StringFormat","utf8Bytes_","base64Bytes_","dataURLBytes_","dataURLContentType_","b","c","charCodeAt","push","valid","hi","lo","Uint8Array","percentEncodedBytes_","decoded","invalidFormat","hasMinus","hasUnder","invalidChar","hasPlus","hasSlash","bytes","includes","array","DataURLParts","dataURL","base64","matches","match","middle","endsWith","substring","rest","dataUrl","parts","s","longEnough","FbsBlob","elideCopy","size","blobType","data_","type","ArrayBuffer","byteLength","set","size_","type_","startByte","endByte","realBlob","sliced","buffer","blobby","map","val","uint8Arrays","dataFromString","finalLength","forEach","merged","index","jsonObjectOrNull","obj","JSON","parse","parent","lastIndexOf","newPath","childPath","canonicalChildPath","split","filter","component","join","lastComponent","metadata","Mapping","server","local","writable","xform","noXform_","mappings_","xformPath","fullPath","getMappings","mappings","mappingsXformPath","_metadata","nameMapping","xformSize","Number","sizeMapping","service","generateRef","_makeStorageReference","defineProperty","get","fromResource","resource","len","mapping","addRef","fromResourceString","resourceString","downloadUrlFromResourceString","tokens","tokensList","urls","token","base","queryString","alt","stringify","PREFIXES_KEY","ITEMS_KEY","fromBackendResponse","listResult","prefixes","items","nextPageToken","pathWithoutTrailingSlash","reference","item","fromResponseString","RequestInfo","handlerCheck","cndn","xhr","text","_protocol","sharedErrorHandler","newErr","objectErrorHandler","shared","getMetadata","fullServerUrl","maxOperationRetryTime","metadataHandler","list","delimiter","pageToken","maxResults","isRoot","bucketOnlyServerUrl","listHandler","getBytes","maxDownloadSizeBytes","_","getDownloadUrl","downloadUrlHandler","updateMetadata","toResourceString","_xhr","_text","metadataForUpload_","metadataClone","determineContentType_","multipartUpload","genBoundary","str","toString","boundary","metadata_","metadataString","preBlobPart","postBlobPart","maxUploadRetryTime","uploadData","ResumableUploadStatus","current","finalized","allowed","getResponseHeader","allowedStatus","createResumableUpload","metadataForUpload","checkResumeHeader_","getResumableUploadStatus","sizeString","isNaN","RESUMABLE_UPLOAD_CHUNK_SIZE","continueResumableUpload","chunkSize","bytesLeft","bytesToUpload","min","uploadCommand","uploadStatus","newCurrent","STATE_CHANGED","RUNNING","PAUSED","SUCCESS","ERROR","taskStateFromInternalTaskState","state","TaskState","Observer","nextOrObserver","complete","asFunctions","next","observer","async","f","argsToForward","textFactoryOverride","XhrConnection","sent_","xhr_","XMLHttpRequest","initXhr","errorCode_","sendPromise_","addEventListener","NETWORK_ERROR","open","setRequestHeader","response","statusText","header","listener","upload","removeEventListener","XhrTextConnection","responseType","newTextConnection","XhrBytesConnection","newBytesConnection","XhrBlobConnection","newBlobConnection","UploadTask","ref","_transferred","_needToFetchStatus","_needToFetchMetadata","_observers","_error","_uploadUrl","_request","_chunkMultiplier","_resolve","_reject","_ref","_blob","_mappings","_resumable","_shouldDoResumable","_state","_errorHandler","_codeEquals","completeTransitions_","backoffExpired","isExponentialBackoffExpired","sleepTime","max","_transition","_metadataErrorHandler","maxSleepTime","storage","_promise","_start","sizeBefore","_updateProgress","_createResumable","_fetchStatus","_fetchMetadata","pendingTimeout","_continueUpload","_oneShotUpload","callback","all","_getAuthToken","_getAppCheckToken","_resolveToken","_location","createRequest","_makeRequest","getPromise","statusRequest","_makeProgressCallback","uploadRequest","newStatus","_increaseMultiplier","currentSize","metadataRequest","multipartRequest","transferred","old","_notifyObservers","cancel","wasPaused","externalState","bytesTransferred","totalBytes","task","completed","_addObserver","_removeObserver","onFulfilled","onRejected","_notifyObserver","splice","_finishPromise","observers","triggered","fbsAsync","bind","snapshot","toCall","Reference","_service","_newRef","_throwIfRoot","makeRequestWithTokens","uploadBytes","finalMetadata","uploadBytesResumable","listAll","accumulator","listAllHelper","opt","nextPage","options","op","requestsList","requestsGetMetadata","requestsUpdateMetadata","getDownloadURL","requestsGetDownloadUrl","deleteObject","requestsDeleteObject","child","isUrl","test","refFromURL","refFromPath","FirebaseStorageImpl","_bucket","_getChild","serviceOrRef","pathOrUrl","extractBucket","config","makeFromBucketSpec","connectStorageEmulator","port","mockUserToken","_overrideAuthToken","createMockUserToken","app","projectId","_authProvider","_appCheckProvider","_url","_firebaseVersion","_host","_appId","_deleted","_maxOperationRetryTime","_maxUploadRetryTime","_requests","Set","time","POSITIVE_INFINITY","auth","getImmediate","optional","getToken","tokenData","accessToken","appCheck","request","clear","add","delete","STORAGE_TYPE","getModularInstance","getBytesInternal","uploadBytesInternal","uploadString","uploadStringInternal","uploadBytesResumableInternal","getMetadataInternal","updateMetadataInternal","listInternal","listAllInternal","getDownloadURLInternal","deleteObjectInternal","refInternal","_getChildInternal","getStorage","getApp","bucketUrl","storageProvider","_getProvider","storageInstance","identifier","emulator","getDefaultEmulatorHostnameAndPort","connectEmulatorInternal","getBlobInternal","Error","factory","container","instanceIdentifier","getProvider","authProvider","appCheckProvider","SDK_VERSION","registerStorage","_registerComponent","Component","setMultipleInstances","registerVersion"],"sources":["E:\\Projects\\React Projects\\local-chat\\node_modules\\@firebase\\storage\\src\\implementation\\constants.ts","E:\\Projects\\React Projects\\local-chat\\node_modules\\@firebase\\storage\\src\\implementation\\error.ts","E:\\Projects\\React Projects\\local-chat\\node_modules\\@firebase\\storage\\src\\implementation\\location.ts","E:\\Projects\\React Projects\\local-chat\\node_modules\\@firebase\\storage\\src\\implementation\\failrequest.ts","E:\\Projects\\React Projects\\local-chat\\node_modules\\@firebase\\storage\\src\\implementation\\backoff.ts","E:\\Projects\\React Projects\\local-chat\\node_modules\\@firebase\\storage\\src\\implementation\\type.ts","E:\\Projects\\React Projects\\local-chat\\node_modules\\@firebase\\storage\\src\\implementation\\url.ts","E:\\Projects\\React Projects\\local-chat\\node_modules\\@firebase\\storage\\src\\implementation\\connection.ts","E:\\Projects\\React Projects\\local-chat\\node_modules\\@firebase\\storage\\src\\implementation\\utils.ts","E:\\Projects\\React Projects\\local-chat\\node_modules\\@firebase\\storage\\src\\implementation\\request.ts","E:\\Projects\\React Projects\\local-chat\\node_modules\\@firebase\\storage\\src\\implementation\\fs.ts","E:\\Projects\\React Projects\\local-chat\\node_modules\\@firebase\\storage\\src\\platform\\browser\\base64.ts","E:\\Projects\\React Projects\\local-chat\\node_modules\\@firebase\\storage\\src\\implementation\\string.ts","E:\\Projects\\React Projects\\local-chat\\node_modules\\@firebase\\storage\\src\\implementation\\blob.ts","E:\\Projects\\React Projects\\local-chat\\node_modules\\@firebase\\storage\\src\\implementation\\json.ts","E:\\Projects\\React Projects\\local-chat\\node_modules\\@firebase\\storage\\src\\implementation\\path.ts","E:\\Projects\\React Projects\\local-chat\\node_modules\\@firebase\\storage\\src\\implementation\\metadata.ts","E:\\Projects\\React Projects\\local-chat\\node_modules\\@firebase\\storage\\src\\implementation\\list.ts","E:\\Projects\\React Projects\\local-chat\\node_modules\\@firebase\\storage\\src\\implementation\\requestinfo.ts","E:\\Projects\\React Projects\\local-chat\\node_modules\\@firebase\\storage\\src\\implementation\\requests.ts","E:\\Projects\\React Projects\\local-chat\\node_modules\\@firebase\\storage\\src\\implementation\\taskenums.ts","E:\\Projects\\React Projects\\local-chat\\node_modules\\@firebase\\storage\\src\\implementation\\observer.ts","E:\\Projects\\React Projects\\local-chat\\node_modules\\@firebase\\storage\\src\\implementation\\async.ts","E:\\Projects\\React Projects\\local-chat\\node_modules\\@firebase\\storage\\src\\platform\\browser\\connection.ts","E:\\Projects\\React Projects\\local-chat\\node_modules\\@firebase\\storage\\src\\task.ts","E:\\Projects\\React Projects\\local-chat\\node_modules\\@firebase\\storage\\src\\reference.ts","E:\\Projects\\React Projects\\local-chat\\node_modules\\@firebase\\storage\\src\\service.ts","E:\\Projects\\React Projects\\local-chat\\node_modules\\@firebase\\storage\\src\\constants.ts","E:\\Projects\\React Projects\\local-chat\\node_modules\\@firebase\\storage\\src\\api.ts","E:\\Projects\\React Projects\\local-chat\\node_modules\\@firebase\\storage\\src\\api.browser.ts","E:\\Projects\\React Projects\\local-chat\\node_modules\\@firebase\\storage\\src\\index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Constants used in the Firebase Storage library.\n */\n\n/**\n * Domain name for firebase storage.\n */\nexport const DEFAULT_HOST = 'firebasestorage.googleapis.com';\n\n/**\n * The key in Firebase config json for the storage bucket.\n */\nexport const CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n\n/**\n * 2 minutes\n *\n * The timeout for all operations except upload.\n */\nexport const DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n\n/**\n * 10 minutes\n *\n * The timeout for upload.\n */\nexport const DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\n * 1 second\n */\nexport const DEFAULT_MIN_SLEEP_TIME_MILLIS = 1000;\n\n/**\n * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported\n * enough for us to use it directly.\n */\nexport const MIN_SAFE_INTEGER = -9007199254740991;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\n\nimport { CONFIG_STORAGE_BUCKET_KEY } from './constants';\n\n/**\n * An error returned by the Firebase Storage SDK.\n * @public\n */\nexport class StorageError extends FirebaseError {\n  private readonly _baseMessage: string;\n  /**\n   * Stores custom error data unique to the `StorageError`.\n   */\n  customData: { serverResponse: string | null } = { serverResponse: null };\n\n  /**\n   * @param code - A `StorageErrorCode` string to be prefixed with 'storage/' and\n   *  added to the end of the message.\n   * @param message  - Error message.\n   * @param status_ - Corresponding HTTP Status Code\n   */\n  constructor(code: StorageErrorCode, message: string, private status_ = 0) {\n    super(\n      prependCode(code),\n      `Firebase Storage: ${message} (${prependCode(code)})`\n    );\n    this._baseMessage = this.message;\n    // Without this, `instanceof StorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(this, StorageError.prototype);\n  }\n\n  get status(): number {\n    return this.status_;\n  }\n\n  set status(status: number) {\n    this.status_ = status;\n  }\n\n  /**\n   * Compares a `StorageErrorCode` against this error's code, filtering out the prefix.\n   */\n  _codeEquals(code: StorageErrorCode): boolean {\n    return prependCode(code) === this.code;\n  }\n\n  /**\n   * Optional response message that was added by the server.\n   */\n  get serverResponse(): null | string {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse: string | null) {\n    this.customData.serverResponse = serverResponse;\n    if (this.customData.serverResponse) {\n      this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\n    } else {\n      this.message = this._baseMessage;\n    }\n  }\n}\n\nexport const errors = {};\n\n/**\n * @public\n * Error codes that can be attached to `StorageError` objects.\n */\nexport enum StorageErrorCode {\n  // Shared between all platforms\n  UNKNOWN = 'unknown',\n  OBJECT_NOT_FOUND = 'object-not-found',\n  BUCKET_NOT_FOUND = 'bucket-not-found',\n  PROJECT_NOT_FOUND = 'project-not-found',\n  QUOTA_EXCEEDED = 'quota-exceeded',\n  UNAUTHENTICATED = 'unauthenticated',\n  UNAUTHORIZED = 'unauthorized',\n  UNAUTHORIZED_APP = 'unauthorized-app',\n  RETRY_LIMIT_EXCEEDED = 'retry-limit-exceeded',\n  INVALID_CHECKSUM = 'invalid-checksum',\n  CANCELED = 'canceled',\n  // JS specific\n  INVALID_EVENT_NAME = 'invalid-event-name',\n  INVALID_URL = 'invalid-url',\n  INVALID_DEFAULT_BUCKET = 'invalid-default-bucket',\n  NO_DEFAULT_BUCKET = 'no-default-bucket',\n  CANNOT_SLICE_BLOB = 'cannot-slice-blob',\n  SERVER_FILE_WRONG_SIZE = 'server-file-wrong-size',\n  NO_DOWNLOAD_URL = 'no-download-url',\n  INVALID_ARGUMENT = 'invalid-argument',\n  INVALID_ARGUMENT_COUNT = 'invalid-argument-count',\n  APP_DELETED = 'app-deleted',\n  INVALID_ROOT_OPERATION = 'invalid-root-operation',\n  INVALID_FORMAT = 'invalid-format',\n  INTERNAL_ERROR = 'internal-error',\n  UNSUPPORTED_ENVIRONMENT = 'unsupported-environment'\n}\n\nexport function prependCode(code: StorageErrorCode): string {\n  return 'storage/' + code;\n}\n\nexport function unknown(): StorageError {\n  const message =\n    'An unknown error occurred, please check the error payload for ' +\n    'server response.';\n  return new StorageError(StorageErrorCode.UNKNOWN, message);\n}\n\nexport function objectNotFound(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.OBJECT_NOT_FOUND,\n    \"Object '\" + path + \"' does not exist.\"\n  );\n}\n\nexport function bucketNotFound(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.BUCKET_NOT_FOUND,\n    \"Bucket '\" + bucket + \"' does not exist.\"\n  );\n}\n\nexport function projectNotFound(project: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.PROJECT_NOT_FOUND,\n    \"Project '\" + project + \"' does not exist.\"\n  );\n}\n\nexport function quotaExceeded(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.QUOTA_EXCEEDED,\n    \"Quota for bucket '\" +\n      bucket +\n      \"' exceeded, please view quota on \" +\n      'https://firebase.google.com/pricing/.'\n  );\n}\n\nexport function unauthenticated(): StorageError {\n  const message =\n    'User is not authenticated, please authenticate using Firebase ' +\n    'Authentication and try again.';\n  return new StorageError(StorageErrorCode.UNAUTHENTICATED, message);\n}\n\nexport function unauthorizedApp(): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED_APP,\n    'This app does not have permission to access Firebase Storage on this project.'\n  );\n}\n\nexport function unauthorized(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED,\n    \"User does not have permission to access '\" + path + \"'.\"\n  );\n}\n\nexport function retryLimitExceeded(): StorageError {\n  return new StorageError(\n    StorageErrorCode.RETRY_LIMIT_EXCEEDED,\n    'Max retry time for operation exceeded, please try again.'\n  );\n}\n\nexport function invalidChecksum(\n  path: string,\n  checksum: string,\n  calculated: string\n): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_CHECKSUM,\n    \"Uploaded/downloaded object '\" +\n      path +\n      \"' has checksum '\" +\n      checksum +\n      \"' which does not match '\" +\n      calculated +\n      \"'. Please retry the upload/download.\"\n  );\n}\n\nexport function canceled(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANCELED,\n    'User canceled the upload/download.'\n  );\n}\n\nexport function invalidEventName(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_EVENT_NAME,\n    \"Invalid event name '\" + name + \"'.\"\n  );\n}\n\nexport function invalidUrl(url: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_URL,\n    \"Invalid URL '\" + url + \"'.\"\n  );\n}\n\nexport function invalidDefaultBucket(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_DEFAULT_BUCKET,\n    \"Invalid default bucket '\" + bucket + \"'.\"\n  );\n}\n\nexport function noDefaultBucket(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DEFAULT_BUCKET,\n    'No default bucket ' +\n      \"found. Did you set the '\" +\n      CONFIG_STORAGE_BUCKET_KEY +\n      \"' property when initializing the app?\"\n  );\n}\n\nexport function cannotSliceBlob(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANNOT_SLICE_BLOB,\n    'Cannot slice blob for upload. Please retry the upload.'\n  );\n}\n\nexport function serverFileWrongSize(): StorageError {\n  return new StorageError(\n    StorageErrorCode.SERVER_FILE_WRONG_SIZE,\n    'Server recorded incorrect upload file size, please retry the upload.'\n  );\n}\n\nexport function noDownloadURL(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DOWNLOAD_URL,\n    'The given file does not have any download URLs.'\n  );\n}\n\nexport function missingPolyFill(polyFill: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n    `${polyFill} is missing. Make sure to install the required polyfills. See https://firebase.google.com/docs/web/environments-js-sdk#polyfills for more information.`\n  );\n}\n\n/**\n * @internal\n */\nexport function invalidArgument(message: string): StorageError {\n  return new StorageError(StorageErrorCode.INVALID_ARGUMENT, message);\n}\n\nexport function invalidArgumentCount(\n  argMin: number,\n  argMax: number,\n  fnName: string,\n  real: number\n): StorageError {\n  let countPart;\n  let plural;\n  if (argMin === argMax) {\n    countPart = argMin;\n    plural = argMin === 1 ? 'argument' : 'arguments';\n  } else {\n    countPart = 'between ' + argMin + ' and ' + argMax;\n    plural = 'arguments';\n  }\n  return new StorageError(\n    StorageErrorCode.INVALID_ARGUMENT_COUNT,\n    'Invalid argument count in `' +\n      fnName +\n      '`: Expected ' +\n      countPart +\n      ' ' +\n      plural +\n      ', received ' +\n      real +\n      '.'\n  );\n}\n\nexport function appDeleted(): StorageError {\n  return new StorageError(\n    StorageErrorCode.APP_DELETED,\n    'The Firebase app was deleted.'\n  );\n}\n\n/**\n * @param name - The name of the operation that was invalid.\n *\n * @internal\n */\nexport function invalidRootOperation(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_ROOT_OPERATION,\n    \"The operation '\" +\n      name +\n      \"' cannot be performed on a root reference, create a non-root \" +\n      \"reference using child, such as .child('file.png').\"\n  );\n}\n\n/**\n * @param format - The format that was not valid.\n * @param message - A message describing the format violation.\n */\nexport function invalidFormat(format: string, message: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_FORMAT,\n    \"String does not match format '\" + format + \"': \" + message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function unsupportedEnvironment(message: string): StorageError {\n  throw new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, message);\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function internalError(message: string): StorageError {\n  throw new StorageError(\n    StorageErrorCode.INTERNAL_ERROR,\n    'Internal error: ' + message\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functionality related to the parsing/composition of bucket/\n * object location.\n */\n\nimport { invalidDefaultBucket, invalidUrl } from './error';\nimport { DEFAULT_HOST } from './constants';\n\n/**\n * Firebase Storage location data.\n *\n * @internal\n */\nexport class Location {\n  private path_: string;\n\n  constructor(public readonly bucket: string, path: string) {\n    this.path_ = path;\n  }\n\n  get path(): string {\n    return this.path_;\n  }\n\n  get isRoot(): boolean {\n    return this.path.length === 0;\n  }\n\n  fullServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString: string, host: string): Location {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString, host);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url: string, host: string): Location {\n    let location: Location | null = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc: Location): void {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = { bucket: 1, path: 3 };\n\n    function httpModify(loc: Location): void {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(\n      `^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`,\n      'i'\n    );\n    const firebaseStorageIndices = { bucket: 1, path: 3 };\n\n    const cloudStorageHost =\n      host === DEFAULT_HOST\n        ? '(?:storage.googleapis.com|storage.cloud.google.com)'\n        : host;\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(\n      `^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`,\n      'i'\n    );\n    const cloudStorageIndices = { bucket: 1, path: 2 };\n\n    const groups = [\n      { regex: gsRegex, indices: gsIndices, postModify: gsModify },\n      {\n        regex: firebaseStorageRegExp,\n        indices: firebaseStorageIndices,\n        postModify: httpModify\n      },\n      {\n        regex: cloudStorageRegExp,\n        indices: cloudStorageIndices,\n        postModify: httpModify\n      }\n    ];\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageError } from './error';\nimport { Request } from './request';\n\n/**\n * A request whose promise always fails.\n */\nexport class FailRequest<T> implements Request<T> {\n  promise_: Promise<T>;\n\n  constructor(error: StorageError) {\n    this.promise_ = Promise.reject<T>(error);\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(_appDelete = false): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides a method for running a function with exponential\n * backoff.\n */\ntype id = (p1: boolean) => void;\n\nexport { id };\n\n/**\n * Accepts a callback for an action to perform (`doRequest`),\n * and then a callback for when the backoff has completed (`backoffCompleteCb`).\n * The callback sent to start requires an argument to call (`onRequestComplete`).\n * When `start` calls `doRequest`, it passes a callback for when the request has\n * completed, `onRequestComplete`. Based on this, the backoff continues, with\n * another call to `doRequest` and the above loop continues until the timeout\n * is hit, or a successful response occurs.\n * @description\n * @param doRequest Callback to perform request\n * @param backoffCompleteCb Callback to call when backoff has been completed\n */\nexport function start(\n  doRequest: (\n    onRequestComplete: (success: boolean) => void,\n    canceled: boolean\n  ) => void,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  backoffCompleteCb: (...args: any[]) => unknown,\n  timeout: number\n): id {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let retryTimeoutId: any = null;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let globalTimeoutId: any = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled(): boolean {\n    return cancelState === 2;\n  }\n  let triggeredCallback = false;\n\n  function triggerCallback(...args: any[]): void {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      backoffCompleteCb.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis: number): void {\n    retryTimeoutId = setTimeout(() => {\n      retryTimeoutId = null;\n      doRequest(responseHandler, canceled());\n    }, millis);\n  }\n\n  function clearGlobalTimeout(): void {\n    if (globalTimeoutId) {\n      clearTimeout(globalTimeoutId);\n    }\n  }\n\n  function responseHandler(success: boolean, ...args: any[]): void {\n    if (triggeredCallback) {\n      clearGlobalTimeout();\n      return;\n    }\n    if (success) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    const mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    let waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  let stopped = false;\n\n  function stop(wasTimeout: boolean): void {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    clearGlobalTimeout();\n    if (triggeredCallback) {\n      return;\n    }\n    if (retryTimeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(retryTimeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  globalTimeoutId = setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n\n/**\n * Stops the retry loop from repeating.\n * If the function is currently \"in between\" retries, it is invoked immediately\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\n * after the current invocation finishes iff the current invocation would have\n * triggered another retry.\n */\nexport function stop(id: id): void {\n  id(false);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isNode } from '@firebase/util';\nimport { invalidArgument } from './error';\n\nexport function isJustDef<T>(p: T | null | undefined): p is T | null {\n  return p !== void 0;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(p: unknown): p is Function {\n  return typeof p === 'function';\n}\n\nexport function isNonArrayObject(p: unknown): boolean {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nexport function isString(p: unknown): p is string {\n  return typeof p === 'string' || p instanceof String;\n}\n\nexport function isNativeBlob(p: unknown): p is Blob {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nexport function isNativeBlobDefined(): boolean {\n  // Note: The `isNode()` check can be removed when `node-fetch` adds native Blob support\n  // PR: https://github.com/node-fetch/node-fetch/pull/1664\n  return typeof Blob !== 'undefined' && !isNode();\n}\n\nexport function validateNumber(\n  argument: string,\n  minValue: number,\n  maxValue: number,\n  value: number\n): void {\n  if (value < minValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${minValue} or greater.`\n    );\n  }\n  if (value > maxValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${maxValue} or less.`\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functions to create and manipulate URLs for the server API.\n */\nimport { UrlParams } from './requestinfo';\n\nexport function makeUrl(\n  urlPart: string,\n  host: string,\n  protocol: string\n): string {\n  let origin = host;\n  if (protocol == null) {\n    origin = `https://${host}`;\n  }\n  return `${protocol}://${origin}/v0${urlPart}`;\n}\n\nexport function makeQueryString(params: UrlParams): string {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Network headers */\nexport type Headers = Record<string, string>;\n\n/** Response type exposed by the networking APIs. */\nexport type ConnectionType =\n  | string\n  | ArrayBuffer\n  | Blob\n  | NodeJS.ReadableStream;\n\n/**\n * A lightweight wrapper around XMLHttpRequest with a\n * goog.net.XhrIo-like interface.\n *\n * You can create a new connection by invoking `newTextConnection()`,\n * `newBytesConnection()` or `newStreamConnection()`.\n */\nexport interface Connection<T extends ConnectionType> {\n  /**\n   * Sends a request to the provided URL.\n   *\n   * This method never rejects its promise. In case of encountering an error,\n   * it sets an error code internally which can be accessed by calling\n   * getErrorCode() by callers.\n   */\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string | null,\n    headers?: Headers\n  ): Promise<void>;\n\n  getErrorCode(): ErrorCode;\n\n  getStatus(): number;\n\n  getResponse(): T;\n\n  getErrorText(): string;\n\n  /**\n   * Abort the request.\n   */\n  abort(): void;\n\n  getResponseHeader(header: string): string | null;\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n}\n\n/**\n * Error codes for requests made by the the XhrIo wrapper.\n */\nexport enum ErrorCode {\n  NO_ERROR = 0,\n  NETWORK_ERROR = 1,\n  ABORT = 2\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Checks the status code to see if the action should be retried.\n *\n * @param status Current HTTP status code returned by server.\n * @param additionalRetryCodes additional retry codes to check against\n */\nexport function isRetryStatusCode(\n  status: number,\n  additionalRetryCodes: number[]\n): boolean {\n  // The codes for which to retry came from this page:\n  // https://cloud.google.com/storage/docs/exponential-backoff\n  const isFiveHundredCode = status >= 500 && status < 600;\n  const extraRetryCodes = [\n    // Request Timeout: web server didn't receive full request in time.\n    408,\n    // Too Many Requests: you're getting rate-limited, basically.\n    429\n  ];\n  const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n  const isAdditionalRetryCode = additionalRetryCodes.indexOf(status) !== -1;\n  return isFiveHundredCode || isExtraRetryCode || isAdditionalRetryCode;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods used to actually send HTTP requests from\n * abstract representations.\n */\n\nimport { id as backoffId, start, stop } from './backoff';\nimport { appDeleted, canceled, retryLimitExceeded, unknown } from './error';\nimport { ErrorHandler, RequestHandler, RequestInfo } from './requestinfo';\nimport { isJustDef } from './type';\nimport { makeQueryString } from './url';\nimport { Connection, ErrorCode, Headers, ConnectionType } from './connection';\nimport { isRetryStatusCode } from './utils';\n\nexport interface Request<T> {\n  getPromise(): Promise<T>;\n\n  /**\n   * Cancels the request. IMPORTANT: the promise may still be resolved with an\n   * appropriate value (if the request is finished before you call this method,\n   * but the promise has not yet been resolved), so don't just assume it will be\n   * rejected if you call this function.\n   * @param appDelete - True if the cancelation came from the app being deleted.\n   */\n  cancel(appDelete?: boolean): void;\n}\n\n/**\n * Handles network logic for all Storage Requests, including error reporting and\n * retries with backoff.\n *\n * @param I - the type of the backend's network response.\n * @param - O the output type used by the rest of the SDK. The conversion\n * happens in the specified `callback_`.\n */\nclass NetworkRequest<I extends ConnectionType, O> implements Request<O> {\n  private pendingConnection_: Connection<I> | null = null;\n  private backoffId_: backoffId | null = null;\n  private resolve_!: (value?: O | PromiseLike<O>) => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private reject_!: (reason?: any) => void;\n  private canceled_: boolean = false;\n  private appDelete_: boolean = false;\n  private promise_: Promise<O>;\n\n  constructor(\n    private url_: string,\n    private method_: string,\n    private headers_: Headers,\n    private body_: string | Blob | Uint8Array | null,\n    private successCodes_: number[],\n    private additionalRetryCodes_: number[],\n    private callback_: RequestHandler<I, O>,\n    private errorCallback_: ErrorHandler | null,\n    private timeout_: number,\n    private progressCallback_: ((p1: number, p2: number) => void) | null,\n    private connectionFactory_: () => Connection<I>,\n    private retry = true\n  ) {\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve as (value?: O | PromiseLike<O>) => void;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n\n  /**\n   * Actually starts the retry loop.\n   */\n  private start_(): void {\n    const doTheRequest: (\n      backoffCallback: (success: boolean, ...p2: unknown[]) => void,\n      canceled: boolean\n    ) => void = (backoffCallback, canceled) => {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      const connection = this.connectionFactory_();\n      this.pendingConnection_ = connection;\n\n      const progressListener: (\n        progressEvent: ProgressEvent\n      ) => void = progressEvent => {\n        const loaded = progressEvent.loaded;\n        const total = progressEvent.lengthComputable ? progressEvent.total : -1;\n        if (this.progressCallback_ !== null) {\n          this.progressCallback_(loaded, total);\n        }\n      };\n      if (this.progressCallback_ !== null) {\n        connection.addUploadProgressListener(progressListener);\n      }\n\n      // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      connection\n        .send(this.url_, this.method_, this.body_, this.headers_)\n        .then(() => {\n          if (this.progressCallback_ !== null) {\n            connection.removeUploadProgressListener(progressListener);\n          }\n          this.pendingConnection_ = null;\n          const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n          const status = connection.getStatus();\n          if (\n            !hitServer ||\n            (isRetryStatusCode(status, this.additionalRetryCodes_) &&\n              this.retry)\n          ) {\n            const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n            backoffCallback(\n              false,\n              new RequestEndStatus(false, null, wasCanceled)\n            );\n            return;\n          }\n          const successCode = this.successCodes_.indexOf(status) !== -1;\n          backoffCallback(true, new RequestEndStatus(successCode, connection));\n        });\n    };\n\n    /**\n     * @param requestWentThrough - True if the request eventually went\n     *     through, false if it hit the retry limit or was canceled.\n     */\n    const backoffDone: (\n      requestWentThrough: boolean,\n      status: RequestEndStatus<I>\n    ) => void = (requestWentThrough, status) => {\n      const resolve = this.resolve_;\n      const reject = this.reject_;\n      const connection = status.connection as Connection<I>;\n      if (status.wasSuccessCode) {\n        try {\n          const result = this.callback_(connection, connection.getResponse());\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (connection !== null) {\n          const err = unknown();\n          err.serverResponse = connection.getErrorText();\n          if (this.errorCallback_) {\n            reject(this.errorCallback_(connection, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = this.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    };\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<O> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(appDelete?: boolean): void {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n    if (this.pendingConnection_ !== null) {\n      this.pendingConnection_.abort();\n    }\n  }\n}\n\n/**\n * A collection of information about the result of a network request.\n * @param opt_canceled - Defaults to false.\n */\nexport class RequestEndStatus<I extends ConnectionType> {\n  /**\n   * True if the request was canceled.\n   */\n  canceled: boolean;\n\n  constructor(\n    public wasSuccessCode: boolean,\n    public connection: Connection<I> | null,\n    canceled?: boolean\n  ) {\n    this.canceled = !!canceled;\n  }\n}\n\nexport function addAuthHeader_(\n  headers: Headers,\n  authToken: string | null\n): void {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nexport function addVersionHeader_(\n  headers: Headers,\n  firebaseVersion?: string\n): void {\n  headers['X-Firebase-Storage-Version'] =\n    'webjs/' + (firebaseVersion ?? 'AppManager');\n}\n\nexport function addGmpidHeader_(headers: Headers, appId: string | null): void {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nexport function addAppCheckHeader_(\n  headers: Headers,\n  appCheckToken: string | null\n): void {\n  if (appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = appCheckToken;\n  }\n}\n\nexport function makeRequest<I extends ConnectionType, O>(\n  requestInfo: RequestInfo<I, O>,\n  appId: string | null,\n  authToken: string | null,\n  appCheckToken: string | null,\n  requestFactory: () => Connection<I>,\n  firebaseVersion?: string,\n  retry = true\n): Request<O> {\n  const queryPart = makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  addAppCheckHeader_(headers, appCheckToken);\n  return new NetworkRequest<I, O>(\n    url,\n    requestInfo.method,\n    headers,\n    requestInfo.body,\n    requestInfo.successCodes,\n    requestInfo.additionalRetryCodes,\n    requestInfo.handler,\n    requestInfo.errorHandler,\n    requestInfo.timeout,\n    requestInfo.progressCallback,\n    requestFactory,\n    retry\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Some methods copied from goog.fs.\n * We don't include goog.fs because it pulls in a bunch of Deferred code that\n * bloats the size of the released binary.\n */\nimport { isNativeBlobDefined } from './type';\nimport { StorageErrorCode, StorageError } from './error';\n\nfunction getBlobBuilder(): typeof IBlobBuilder | undefined {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param args The values that will make up the resulting blob.\n * @return The blob.\n */\nexport function getBlob(...args: Array<string | Blob | ArrayBuffer>): Blob {\n  const BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new StorageError(\n        StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n        \"This browser doesn't seem to support creating Blobs\"\n      );\n    }\n  }\n}\n\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nexport function sliceBlob(blob: Blob, start: number, end: number): Blob | null {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { missingPolyFill } from '../../implementation/error';\n\n/** Converts a Base64 encoded string to a binary string. */\nexport function decodeBase64(encoded: string): string {\n  if (typeof atob === 'undefined') {\n    throw missingPolyFill('base-64');\n  }\n  return atob(encoded);\n}\n\nexport function decodeUint8Array(data: Uint8Array): string {\n  return new TextDecoder().decode(data);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { unknown, invalidFormat } from './error';\nimport { decodeBase64 } from '../platform/base64';\n\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport type StringFormat = typeof StringFormat[keyof typeof StringFormat];\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport const StringFormat = {\n  /**\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\n   * sequence.\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\n   */\n  RAW: 'raw',\n  /**\n   * Indicates the string should be interpreted as base64-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64: 'base64',\n  /**\n   * Indicates the string should be interpreted as base64url-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64URL: 'base64url',\n  /**\n   * Indicates the string is a data URL, such as one obtained from\n   * canvas.toDataURL().\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\n   * becomes the byte sequence\n   * 69 a6 9a\n   * (the content-type \"application/octet-stream\" is also applied, but can\n   * be overridden in the metadata object).\n   */\n  DATA_URL: 'data_url'\n} as const;\n\nexport class StringData {\n  contentType: string | null;\n\n  constructor(public data: Uint8Array, contentType?: string | null) {\n    this.contentType = contentType || null;\n  }\n}\n\n/**\n * @internal\n */\nexport function dataFromString(\n  format: StringFormat,\n  stringData: string\n): StringData {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(\n        dataURLBytes_(stringData),\n        dataURLContentType_(stringData)\n      );\n    default:\n    // do nothing\n  }\n\n  // assert(false);\n  throw unknown();\n}\n\nexport function utf8Bytes_(value: string): Uint8Array {\n  const b: number[] = [];\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | (c >> 6), 128 | (c & 63));\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid =\n            i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\n            b.push(\n              240 | (c >> 18),\n              128 | ((c >> 12) & 63),\n              128 | ((c >> 6) & 63),\n              128 | (c & 63)\n            );\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\n\nexport function percentEncodedBytes_(value: string): Uint8Array {\n  let decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\n\nexport function base64Bytes_(format: StringFormat, value: string): Uint8Array {\n  switch (format) {\n    case StringFormat.BASE64: {\n      const hasMinus = value.indexOf('-') !== -1;\n      const hasUnder = value.indexOf('_') !== -1;\n      if (hasMinus || hasUnder) {\n        const invalidChar = hasMinus ? '-' : '_';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" +\n            invalidChar +\n            \"' found: is it base64url encoded?\"\n        );\n      }\n      break;\n    }\n    case StringFormat.BASE64URL: {\n      const hasPlus = value.indexOf('+') !== -1;\n      const hasSlash = value.indexOf('/') !== -1;\n      if (hasPlus || hasSlash) {\n        const invalidChar = hasPlus ? '+' : '/';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\"\n        );\n      }\n      value = value.replace(/-/g, '+').replace(/_/g, '/');\n      break;\n    }\n    default:\n    // do nothing\n  }\n  let bytes;\n  try {\n    bytes = decodeBase64(value);\n  } catch (e) {\n    if ((e as Error).message.includes('polyfill')) {\n      throw e;\n    }\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  const array = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\n\nclass DataURLParts {\n  base64: boolean = false;\n  contentType: string | null = null;\n  rest: string;\n\n  constructor(dataURL: string) {\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(\n        StringFormat.DATA_URL,\n        \"Must be formatted 'data:[<mediatype>][;base64],<data>\"\n      );\n    }\n    const middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64\n        ? middle.substring(0, middle.length - ';base64'.length)\n        : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n}\n\nexport function dataURLBytes_(dataUrl: string): Uint8Array {\n  const parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nexport function dataURLContentType_(dataUrl: string): string | null {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s: string, end: string): boolean {\n  const longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Provides a Blob-like wrapper for various binary types (including the\n * native Blob type). This makes it possible to upload types like ArrayBuffers,\n * making uploads possible in environments without the native Blob type.\n */\nimport { sliceBlob, getBlob } from './fs';\nimport { StringFormat, dataFromString } from './string';\nimport { isNativeBlob, isNativeBlobDefined, isString } from './type';\n\n/**\n * @param opt_elideCopy - If true, doesn't copy mutable input data\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\n *     modified after this blob's construction.\n *\n * @internal\n */\nexport class FbsBlob {\n  private data_!: Blob | Uint8Array;\n  private size_: number;\n  private type_: string;\n\n  constructor(data: Blob | Uint8Array | ArrayBuffer, elideCopy?: boolean) {\n    let size: number = 0;\n    let blobType: string = '';\n    if (isNativeBlob(data)) {\n      this.data_ = data as Blob;\n      size = (data as Blob).size;\n      blobType = (data as Blob).type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data as Uint8Array;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data as Uint8Array);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size(): number {\n    return this.size_;\n  }\n\n  type(): string {\n    return this.type_;\n  }\n\n  slice(startByte: number, endByte: number): FbsBlob | null {\n    if (isNativeBlob(this.data_)) {\n      const realBlob = this.data_ as Blob;\n      const sliced = sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(\n        (this.data_ as Uint8Array).buffer,\n        startByte,\n        endByte - startByte\n      );\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob(...args: Array<string | FbsBlob>): FbsBlob | null {\n    if (isNativeBlobDefined()) {\n      const blobby: Array<Blob | Uint8Array | string> = args.map(\n        (val: string | FbsBlob): Blob | Uint8Array | string => {\n          if (val instanceof FbsBlob) {\n            return val.data_;\n          } else {\n            return val;\n          }\n        }\n      );\n      return new FbsBlob(getBlob.apply(null, blobby));\n    } else {\n      const uint8Arrays: Uint8Array[] = args.map(\n        (val: string | FbsBlob): Uint8Array => {\n          if (isString(val)) {\n            return dataFromString(StringFormat.RAW, val as string).data;\n          } else {\n            // Blobs don't exist, so this has to be a Uint8Array.\n            return (val as FbsBlob).data_ as Uint8Array;\n          }\n        }\n      );\n      let finalLength = 0;\n      uint8Arrays.forEach((array: Uint8Array): void => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach((array: Uint8Array) => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData(): Blob | Uint8Array {\n    return this.data_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isNonArrayObject } from './type';\n\n/**\n * Returns the Object resulting from parsing the given JSON, or null if the\n * given string does not represent a JSON object.\n */\nexport function jsonObjectOrNull(\n  s: string\n): { [name: string]: unknown } | null {\n  let obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Contains helper methods for manipulating paths.\n */\n\n/**\n * @return Null if the path is already at the root.\n */\nexport function parent(path: string): string | null {\n  if (path.length === 0) {\n    return null;\n  }\n  const index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  const newPath = path.slice(0, index);\n  return newPath;\n}\n\nexport function child(path: string, childPath: string): string {\n  const canonicalChildPath = childPath\n    .split('/')\n    .filter(component => component.length > 0)\n    .join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n\n/**\n * Returns the last component of a path.\n * '/foo/bar' -> 'bar'\n * '/foo/bar/baz/' -> 'baz/'\n * '/a' -> 'a'\n */\nexport function lastComponent(path: string): string {\n  const index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the metadata format\n */\nimport { Metadata } from '../metadata';\n\nimport { jsonObjectOrNull } from './json';\nimport { Location } from './location';\nimport { lastComponent } from './path';\nimport { isString } from './type';\nimport { makeUrl, makeQueryString } from './url';\nimport { Reference } from '../reference';\nimport { FirebaseStorageImpl } from '../service';\n\nexport function noXform_<T>(metadata: Metadata, value: T): T {\n  return value;\n}\n\nclass Mapping<T> {\n  local: string;\n  writable: boolean;\n  xform: (p1: Metadata, p2?: T) => T | undefined;\n\n  constructor(\n    public server: string,\n    local?: string | null,\n    writable?: boolean,\n    xform?: ((p1: Metadata, p2?: T) => T | undefined) | null\n  ) {\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n}\ntype Mappings = Array<Mapping<string> | Mapping<number>>;\n\nexport { Mappings };\n\nlet mappings_: Mappings | null = null;\n\nexport function xformPath(fullPath: string | undefined): string | undefined {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\n\nexport function getMappings(): Mappings {\n  if (mappings_) {\n    return mappings_;\n  }\n  const mappings: Mappings = [];\n  mappings.push(new Mapping<string>('bucket'));\n  mappings.push(new Mapping<string>('generation'));\n  mappings.push(new Mapping<string>('metageneration'));\n  mappings.push(new Mapping<string>('name', 'fullPath', true));\n\n  function mappingsXformPath(\n    _metadata: Metadata,\n    fullPath: string | undefined\n  ): string | undefined {\n    return xformPath(fullPath);\n  }\n  const nameMapping = new Mapping<string>('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n\n  /**\n   * Coerces the second param to a number, if it is defined.\n   */\n  function xformSize(\n    _metadata: Metadata,\n    size?: number | string\n  ): number | undefined {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  const sizeMapping = new Mapping<number>('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping<number>('timeCreated'));\n  mappings.push(new Mapping<string>('updated'));\n  mappings.push(new Mapping<string>('md5Hash', null, true));\n  mappings.push(new Mapping<string>('cacheControl', null, true));\n  mappings.push(new Mapping<string>('contentDisposition', null, true));\n  mappings.push(new Mapping<string>('contentEncoding', null, true));\n  mappings.push(new Mapping<string>('contentLanguage', null, true));\n  mappings.push(new Mapping<string>('contentType', null, true));\n  mappings.push(new Mapping<string>('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nexport function addRef(metadata: Metadata, service: FirebaseStorageImpl): void {\n  function generateRef(): Reference {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', { get: generateRef });\n}\n\nexport function fromResource(\n  service: FirebaseStorageImpl,\n  resource: { [name: string]: unknown },\n  mappings: Mappings\n): Metadata {\n  const metadata: Metadata = {} as Metadata;\n  metadata['type'] = 'file';\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = (mapping as Mapping<unknown>).xform(\n      metadata,\n      resource[mapping.server]\n    );\n  }\n  addRef(metadata, service);\n  return metadata;\n}\n\nexport function fromResourceString(\n  service: FirebaseStorageImpl,\n  resourceString: string,\n  mappings: Mappings\n): Metadata | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as Metadata;\n  return fromResource(service, resource, mappings);\n}\n\nexport function downloadUrlFromResourceString(\n  metadata: Metadata,\n  resourceString: string,\n  host: string,\n  protocol: string\n): string | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  const tokens: string = obj['downloadTokens'] as string;\n  if (tokens.length === 0) {\n    return null;\n  }\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map((token: string): string => {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = makeUrl(urlPart, host, protocol);\n    const queryString = makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nexport function toResourceString(\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): string {\n  const resource: {\n    [prop: string]: unknown;\n  } = {};\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the listOptions and listResult format\n */\nimport { Location } from './location';\nimport { jsonObjectOrNull } from './json';\nimport { ListResult } from '../list';\nimport { FirebaseStorageImpl } from '../service';\n\n/**\n * Represents the simplified object metadata returned by List API.\n * Other fields are filtered because list in Firebase Rules does not grant\n * the permission to read the metadata.\n */\ninterface ListMetadataResponse {\n  name: string;\n  bucket: string;\n}\n\n/**\n * Represents the JSON response of List API.\n */\ninterface ListResultResponse {\n  prefixes: string[];\n  items: ListMetadataResponse[];\n  nextPageToken?: string;\n}\n\nconst PREFIXES_KEY = 'prefixes';\nconst ITEMS_KEY = 'items';\n\nfunction fromBackendResponse(\n  service: FirebaseStorageImpl,\n  bucket: string,\n  resource: ListResultResponse\n): ListResult {\n  const listResult: ListResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n  if (resource[PREFIXES_KEY]) {\n    for (const path of resource[PREFIXES_KEY]) {\n      const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n      const reference = service._makeStorageReference(\n        new Location(bucket, pathWithoutTrailingSlash)\n      );\n      listResult.prefixes.push(reference);\n    }\n  }\n\n  if (resource[ITEMS_KEY]) {\n    for (const item of resource[ITEMS_KEY]) {\n      const reference = service._makeStorageReference(\n        new Location(bucket, item['name'])\n      );\n      listResult.items.push(reference);\n    }\n  }\n  return listResult;\n}\n\nexport function fromResponseString(\n  service: FirebaseStorageImpl,\n  bucket: string,\n  resourceString: string\n): ListResult | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as unknown as ListResultResponse;\n  return fromBackendResponse(service, bucket, resource);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageError } from './error';\nimport { Headers, Connection, ConnectionType } from './connection';\n\n/**\n * Type for url params stored in RequestInfo.\n */\nexport interface UrlParams {\n  [name: string]: string | number;\n}\n\n/**\n * A function that converts a server response to the API type expected by the\n * SDK.\n *\n * @param I - the type of the backend's network response\n * @param O - the output response type used by the rest of the SDK.\n */\nexport type RequestHandler<I extends ConnectionType, O> = (\n  connection: Connection<I>,\n  response: I\n) => O;\n\n/** A function to handle an error. */\nexport type ErrorHandler = (\n  connection: Connection<ConnectionType>,\n  response: StorageError\n) => StorageError;\n\n/**\n * Contains a fully specified request.\n *\n * @param I - the type of the backend's network response.\n * @param O - the output response type used by the rest of the SDK.\n */\nexport class RequestInfo<I extends ConnectionType, O> {\n  urlParams: UrlParams = {};\n  headers: Headers = {};\n  body: Blob | string | Uint8Array | null = null;\n  errorHandler: ErrorHandler | null = null;\n\n  /**\n   * Called with the current number of bytes uploaded and total size (-1 if not\n   * computable) of the request body (i.e. used to report upload progress).\n   */\n  progressCallback: ((p1: number, p2: number) => void) | null = null;\n  successCodes: number[] = [200];\n  additionalRetryCodes: number[] = [];\n\n  constructor(\n    public url: string,\n    public method: string,\n    /**\n     * Returns the value with which to resolve the request's promise. Only called\n     * if the request is successful. Throw from this function to reject the\n     * returned Request's promise with the thrown error.\n     * Note: The XhrIo passed to this function may be reused after this callback\n     * returns. Do not keep a reference to it in any way.\n     */\n    public handler: RequestHandler<I, O>,\n    public timeout: number\n  ) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods for interacting with the network.\n */\n\nimport { Metadata } from '../metadata';\nimport { ListResult } from '../list';\nimport { FbsBlob } from './blob';\nimport {\n  StorageError,\n  cannotSliceBlob,\n  unauthenticated,\n  quotaExceeded,\n  unauthorized,\n  objectNotFound,\n  serverFileWrongSize,\n  unknown,\n  unauthorizedApp\n} from './error';\nimport { Location } from './location';\nimport {\n  Mappings,\n  fromResourceString,\n  downloadUrlFromResourceString,\n  toResourceString\n} from './metadata';\nimport { fromResponseString } from './list';\nimport { RequestInfo, UrlParams } from './requestinfo';\nimport { isString } from './type';\nimport { makeUrl } from './url';\nimport { Connection, ConnectionType } from './connection';\nimport { FirebaseStorageImpl } from '../service';\n\n/**\n * Throws the UNKNOWN StorageError if cndn is false.\n */\nexport function handlerCheck(cndn: boolean): void {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nexport function metadataHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection<string>, p2: string) => Metadata {\n  function handler(xhr: Connection<string>, text: string): Metadata {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata as Metadata;\n  }\n  return handler;\n}\n\nexport function listHandler(\n  service: FirebaseStorageImpl,\n  bucket: string\n): (p1: Connection<string>, p2: string) => ListResult {\n  function handler(xhr: Connection<string>, text: string): ListResult {\n    const listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult as ListResult;\n  }\n  return handler;\n}\n\nexport function downloadUrlHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection<string>, p2: string) => string | null {\n  function handler(xhr: Connection<string>, text: string): string | null {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(\n      metadata as Metadata,\n      text,\n      service.host,\n      service._protocol\n    );\n  }\n  return handler;\n}\n\nexport function sharedErrorHandler(\n  location: Location\n): (p1: Connection<ConnectionType>, p2: StorageError) => StorageError {\n  function errorHandler(\n    xhr: Connection<ConnectionType>,\n    err: StorageError\n  ): StorageError {\n    let newErr: StorageError;\n    if (xhr.getStatus() === 401) {\n      if (\n        // This exact message string is the only consistent part of the\n        // server's error response that identifies it as an App Check error.\n        xhr.getErrorText().includes('Firebase App Check token is invalid')\n      ) {\n        newErr = unauthorizedApp();\n      } else {\n        newErr = unauthenticated();\n      }\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.status = xhr.getStatus();\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function objectErrorHandler(\n  location: Location\n): (p1: Connection<ConnectionType>, p2: StorageError) => StorageError {\n  const shared = sharedErrorHandler(location);\n\n  function errorHandler(\n    xhr: Connection<ConnectionType>,\n    err: StorageError\n  ): StorageError {\n    let newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function getMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string, Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function list(\n  service: FirebaseStorageImpl,\n  location: Location,\n  delimiter?: string,\n  pageToken?: string | null,\n  maxResults?: number | null\n): RequestInfo<string, ListResult> {\n  const urlParams: UrlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    listHandler(service, location.bucket),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nexport function getBytes<I extends ConnectionType>(\n  service: FirebaseStorageImpl,\n  location: Location,\n  maxDownloadSizeBytes?: number\n): RequestInfo<I, I> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    (_: Connection<I>, data: I) => data,\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  if (maxDownloadSizeBytes !== undefined) {\n    requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\n    requestInfo.successCodes = [200 /* OK */, 206 /* Partial Content */];\n  }\n  return requestInfo;\n}\n\nexport function getDownloadUrl(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string, string | null> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    downloadUrlHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function updateMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): RequestInfo<string, Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'PATCH';\n  const body = toResourceString(metadata, mappings);\n  const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function deleteObject(\n  service: FirebaseStorageImpl,\n  location: Location\n): RequestInfo<string, void> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr: Connection<string>, _text: string): void {}\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function determineContentType_(\n  metadata: Metadata | null,\n  blob: FbsBlob | null\n): string {\n  return (\n    (metadata && metadata['contentType']) ||\n    (blob && blob.type()) ||\n    'application/octet-stream'\n  );\n}\n\nexport function metadataForUpload_(\n  location: Location,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): Metadata {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n\n/**\n * Prepare RequestInfo for uploads as Content-Type: multipart.\n */\nexport function multipartUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string, Metadata> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers: { [prop: string]: string } = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary(): string {\n    let str = '';\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = toResourceString(metadata_, mappings);\n  const preBlobPart =\n    '--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\n    metadataString +\n    '\\r\\n--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: ' +\n    metadata_['contentType'] +\n    '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  const urlParams: UrlParams = { name: metadata_['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param current The number of bytes that have been uploaded so far.\n * @param total The total number of bytes in the upload.\n * @param opt_finalized True if the server has finished the upload.\n * @param opt_metadata The upload metadata, should\n *     only be passed if opt_finalized is true.\n */\nexport class ResumableUploadStatus {\n  finalized: boolean;\n  metadata: Metadata | null;\n\n  constructor(\n    public current: number,\n    public total: number,\n    finalized?: boolean,\n    metadata?: Metadata | null\n  ) {\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n}\n\nexport function checkResumeHeader_(\n  xhr: Connection<string>,\n  allowed?: string[]\n): string {\n  let status: string | null = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status as string;\n}\n\nexport function createResumableUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string, string> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams: UrlParams = { name: metadataForUpload['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType']!,\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n\n  function handler(xhr: Connection<string>): string {\n    checkResumeHeader_(xhr);\n    let url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(isString(url));\n    return url as string;\n  }\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n */\nexport function getResumableUploadStatus(\n  service: FirebaseStorageImpl,\n  location: Location,\n  url: string,\n  blob: FbsBlob\n): RequestInfo<string, ResumableUploadStatus> {\n  const headers = { 'X-Goog-Upload-Command': 'query' };\n\n  function handler(xhr: Connection<string>): ResumableUploadStatus {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString: string | null = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * Any uploads via the resumable upload API must transfer a number of bytes\n * that is a multiple of this number.\n */\nexport const RESUMABLE_UPLOAD_CHUNK_SIZE: number = 256 * 1024;\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n * @param chunkSize Number of bytes to upload.\n * @param status The previous status.\n *     If not passed or null, we start from the beginning.\n * @throws fbs.Error If the upload is already complete, the passed in status\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\n *     for upload.\n */\nexport function continueResumableUpload(\n  location: Location,\n  service: FirebaseStorageImpl,\n  url: string,\n  blob: FbsBlob,\n  chunkSize: number,\n  mappings: Mappings,\n  status?: ResumableUploadStatus | null,\n  progressCallback?: ((p1: number, p2: number) => void) | null\n): RequestInfo<string, ResumableUploadStatus> {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  let uploadCommand = '';\n  if (bytesToUpload === 0) {\n    uploadCommand = 'finalize';\n  } else if (bytesLeft === bytesToUpload) {\n    uploadCommand = 'upload, finalize';\n  } else {\n    uploadCommand = 'upload';\n  }\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': `${status_.current}`\n  };\n  const body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(\n    xhr: Connection<string>,\n    text: string\n  ): ResumableUploadStatus {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(\n      newCurrent,\n      size,\n      uploadStatus === 'final',\n      metadata\n    );\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Enumerations used for upload tasks.\n */\n\n/**\n * An event that is triggered on a task.\n * @internal\n */\nexport type TaskEvent = string;\n\n/**\n * An event that is triggered on a task.\n * @internal\n */\nexport const TaskEvent = {\n  /**\n   * For this event,\n   * <ul>\n   *   <li>The `next` function is triggered on progress updates and when the\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\n   *       argument.</li>\n   *   <li>The `error` function is triggered if the upload is canceled or fails\n   *       for another reason.</li>\n   *   <li>The `complete` function is triggered if the upload completes\n   *       successfully.</li>\n   * </ul>\n   */\n  STATE_CHANGED: 'state_changed'\n};\n\n/**\n * Internal enum for task state.\n */\nexport const enum InternalTaskState {\n  RUNNING = 'running',\n  PAUSING = 'pausing',\n  PAUSED = 'paused',\n  SUCCESS = 'success',\n  CANCELING = 'canceling',\n  CANCELED = 'canceled',\n  ERROR = 'error'\n}\n\n/**\n * Represents the current state of a running upload.\n * @internal\n */\nexport type TaskState = typeof TaskState[keyof typeof TaskState];\n\n// type keys = keyof TaskState\n/**\n * Represents the current state of a running upload.\n * @internal\n */\nexport const TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n\n  /** The task failed with an error. */\n  ERROR: 'error'\n} as const;\n\nexport function taskStateFromInternalTaskState(\n  state: InternalTaskState\n): TaskState {\n  switch (state) {\n    case InternalTaskState.RUNNING:\n    case InternalTaskState.PAUSING:\n    case InternalTaskState.CANCELING:\n      return TaskState.RUNNING;\n    case InternalTaskState.PAUSED:\n      return TaskState.PAUSED;\n    case InternalTaskState.SUCCESS:\n      return TaskState.SUCCESS;\n    case InternalTaskState.CANCELED:\n      return TaskState.CANCELED;\n    case InternalTaskState.ERROR:\n      return TaskState.ERROR;\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isFunction } from './type';\nimport { StorageError } from './error';\n\n/**\n * Function that is called once for each value in a stream of values.\n */\nexport type NextFn<T> = (value: T) => void;\n\n/**\n * A function that is called with a `StorageError`\n * if the event stream ends due to an error.\n */\nexport type ErrorFn = (error: StorageError) => void;\n\n/**\n * A function that is called if the event stream ends normally.\n */\nexport type CompleteFn = () => void;\n\n/**\n * Unsubscribes from a stream.\n */\nexport type Unsubscribe = () => void;\n\n/**\n * An observer identical to the `Observer` defined in packages/util except the\n * error passed into the ErrorFn is specifically a `StorageError`.\n */\nexport interface StorageObserver<T> {\n  /**\n   * Function that is called once for each value in the event stream.\n   */\n  next?: NextFn<T>;\n  /**\n   * A function that is called with a `StorageError`\n   * if the event stream ends due to an error.\n   */\n  error?: ErrorFn;\n  /**\n   * A function that is called if the event stream ends normally.\n   */\n  complete?: CompleteFn;\n}\n\n/**\n * Subscribes to an event stream.\n */\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\nexport class Observer<T> implements StorageObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n\n  constructor(\n    nextOrObserver?: NextFn<T> | StorageObserver<T>,\n    error?: ErrorFn,\n    complete?: CompleteFn\n  ) {\n    const asFunctions =\n      isFunction(nextOrObserver) || error != null || complete != null;\n    if (asFunctions) {\n      this.next = nextOrObserver as NextFn<T>;\n      this.error = error ?? undefined;\n      this.complete = complete ?? undefined;\n    } else {\n      const observer = nextOrObserver as {\n        next?: NextFn<T>;\n        error?: ErrorFn;\n        complete?: CompleteFn;\n      };\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a function that invokes f with its arguments asynchronously as a\n * microtask, i.e. as soon as possible after the current script returns back\n * into browser code.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function async(f: Function): Function {\n  return (...argsToForward: unknown[]) => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(() => f(...argsToForward));\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Connection,\n  ConnectionType,\n  ErrorCode,\n  Headers\n} from '../../implementation/connection';\nimport { internalError } from '../../implementation/error';\n\n/** An override for the text-based Connection. Used in tests. */\nlet textFactoryOverride: (() => Connection<string>) | null = null;\n\n/**\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\n */\nabstract class XhrConnection<T extends ConnectionType>\n  implements Connection<T>\n{\n  protected xhr_: XMLHttpRequest;\n  private errorCode_: ErrorCode;\n  private sendPromise_: Promise<void>;\n  protected sent_: boolean = false;\n\n  constructor() {\n    this.xhr_ = new XMLHttpRequest();\n    this.initXhr();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve();\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve();\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve();\n      });\n    });\n  }\n\n  abstract initXhr(): void;\n\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string,\n    headers?: Headers\n  ): Promise<void> {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n\n  getErrorCode(): ErrorCode {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  }\n\n  getStatus(): number {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  getResponse(): T {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponse() before sending');\n    }\n    return this.xhr_.response;\n  }\n\n  getErrorText(): string {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorText() before sending');\n    }\n    return this.xhr_.statusText;\n  }\n\n  /** Aborts the request. */\n  abort(): void {\n    this.xhr_.abort();\n  }\n\n  getResponseHeader(header: string): string | null {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\n\nexport class XhrTextConnection extends XhrConnection<string> {\n  initXhr(): void {\n    this.xhr_.responseType = 'text';\n  }\n}\n\nexport function newTextConnection(): Connection<string> {\n  return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\n}\n\nexport class XhrBytesConnection extends XhrConnection<ArrayBuffer> {\n  private data_?: ArrayBuffer;\n\n  initXhr(): void {\n    this.xhr_.responseType = 'arraybuffer';\n  }\n}\n\nexport function newBytesConnection(): Connection<ArrayBuffer> {\n  return new XhrBytesConnection();\n}\n\nexport class XhrBlobConnection extends XhrConnection<Blob> {\n  initXhr(): void {\n    this.xhr_.responseType = 'blob';\n  }\n}\n\nexport function newBlobConnection(): Connection<Blob> {\n  return new XhrBlobConnection();\n}\n\nexport function newStreamConnection(): Connection<NodeJS.ReadableStream> {\n  throw new Error('Streams are only supported on Node');\n}\n\nexport function injectTestConnection(\n  factory: (() => Connection<string>) | null\n): void {\n  textFactoryOverride = factory;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Defines types for interacting with blob transfer tasks.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport {\n  canceled,\n  StorageErrorCode,\n  StorageError,\n  retryLimitExceeded\n} from './implementation/error';\nimport {\n  InternalTaskState,\n  TaskEvent,\n  TaskState,\n  taskStateFromInternalTaskState\n} from './implementation/taskenums';\nimport { Metadata } from './metadata';\nimport {\n  Observer,\n  Subscribe,\n  Unsubscribe,\n  StorageObserver as StorageObserverInternal,\n  NextFn\n} from './implementation/observer';\nimport { Request } from './implementation/request';\nimport { UploadTaskSnapshot, StorageObserver } from './public-types';\nimport { async as fbsAsync } from './implementation/async';\nimport { Mappings, getMappings } from './implementation/metadata';\nimport {\n  createResumableUpload,\n  getResumableUploadStatus,\n  RESUMABLE_UPLOAD_CHUNK_SIZE,\n  ResumableUploadStatus,\n  continueResumableUpload,\n  getMetadata,\n  multipartUpload\n} from './implementation/requests';\nimport { Reference } from './reference';\nimport { newTextConnection } from './platform/connection';\nimport { isRetryStatusCode } from './implementation/utils';\nimport { CompleteFn } from '@firebase/util';\nimport { DEFAULT_MIN_SLEEP_TIME_MILLIS } from './implementation/constants';\n\n/**\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\n * upload and manage callbacks for various events.\n * @internal\n */\nexport class UploadTask {\n  private _ref: Reference;\n  /**\n   * The data to be uploaded.\n   */\n  _blob: FbsBlob;\n  /**\n   * Metadata related to the upload.\n   */\n  _metadata: Metadata | null;\n  private _mappings: Mappings;\n  /**\n   * Number of bytes transferred so far.\n   */\n  _transferred: number = 0;\n  private _needToFetchStatus: boolean = false;\n  private _needToFetchMetadata: boolean = false;\n  private _observers: Array<StorageObserverInternal<UploadTaskSnapshot>> = [];\n  private _resumable: boolean;\n  /**\n   * Upload state.\n   */\n  _state: InternalTaskState;\n  private _error?: StorageError = undefined;\n  private _uploadUrl?: string = undefined;\n  private _request?: Request<unknown> = undefined;\n  private _chunkMultiplier: number = 1;\n  private _errorHandler: (p1: StorageError) => void;\n  private _metadataErrorHandler: (p1: StorageError) => void;\n  private _resolve?: (p1: UploadTaskSnapshot) => void = undefined;\n  private _reject?: (p1: StorageError) => void = undefined;\n  private pendingTimeout?: ReturnType<typeof setTimeout>;\n  private _promise: Promise<UploadTaskSnapshot>;\n\n  private sleepTime: number;\n\n  private maxSleepTime: number;\n\n  isExponentialBackoffExpired(): boolean {\n    return this.sleepTime > this.maxSleepTime;\n  }\n\n  /**\n   * @param ref - The firebaseStorage.Reference object this task came\n   *     from, untyped to avoid cyclic dependencies.\n   * @param blob - The blob to upload.\n   */\n  constructor(ref: Reference, blob: FbsBlob, metadata: Metadata | null = null) {\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = InternalTaskState.RUNNING;\n    this._errorHandler = error => {\n      this._request = undefined;\n      this._chunkMultiplier = 1;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this._needToFetchStatus = true;\n        this.completeTransitions_();\n      } else {\n        const backoffExpired = this.isExponentialBackoffExpired();\n        if (isRetryStatusCode(error.status, [])) {\n          if (backoffExpired) {\n            error = retryLimitExceeded();\n          } else {\n            this.sleepTime = Math.max(\n              this.sleepTime * 2,\n              DEFAULT_MIN_SLEEP_TIME_MILLIS\n            );\n            this._needToFetchStatus = true;\n            this.completeTransitions_();\n            return;\n          }\n        }\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._metadataErrorHandler = error => {\n      this._request = undefined;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this.sleepTime = 0;\n    this.maxSleepTime = this._ref.storage.maxUploadRetryTime;\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n      this._start();\n    });\n\n    // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n    this._promise.then(null, () => {});\n  }\n\n  private _makeProgressCallback(): (p1: number, p2: number) => void {\n    const sizeBefore = this._transferred;\n    return loaded => this._updateProgress(sizeBefore + loaded);\n  }\n\n  private _shouldDoResumable(blob: FbsBlob): boolean {\n    return blob.size() > 256 * 1024;\n  }\n\n  private _start(): void {\n    if (this._state !== InternalTaskState.RUNNING) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n    if (this._request !== undefined) {\n      return;\n    }\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this.pendingTimeout = setTimeout(() => {\n              this.pendingTimeout = undefined;\n              this._continueUpload();\n            }, this.sleepTime);\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  }\n\n  private _resolveToken(\n    callback: (authToken: string | null, appCheckToken: string | null) => void\n  ): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.all([\n      this._ref.storage._getAuthToken(),\n      this._ref.storage._getAppCheckToken()\n    ]).then(([authToken, appCheckToken]) => {\n      switch (this._state) {\n        case InternalTaskState.RUNNING:\n          callback(authToken, appCheckToken);\n          break;\n        case InternalTaskState.CANCELING:\n          this._transition(InternalTaskState.CANCELED);\n          break;\n        case InternalTaskState.PAUSING:\n          this._transition(InternalTaskState.PAUSED);\n          break;\n        default:\n      }\n    });\n  }\n\n  // TODO(andysoto): assert false\n\n  private _createResumable(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = createResumableUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const createRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = createRequest;\n      createRequest.getPromise().then((url: string) => {\n        this._request = undefined;\n        this._uploadUrl = url;\n        this._needToFetchStatus = false;\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _fetchStatus(): void {\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getResumableUploadStatus(\n        this._ref.storage,\n        this._ref._location,\n        url,\n        this._blob\n      );\n      const statusRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = statusRequest;\n      statusRequest.getPromise().then(status => {\n        status = status as ResumableUploadStatus;\n        this._request = undefined;\n        this._updateProgress(status.current);\n        this._needToFetchStatus = false;\n        if (status.finalized) {\n          this._needToFetchMetadata = true;\n        }\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _continueUpload(): void {\n    const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    const status = new ResumableUploadStatus(\n      this._transferred,\n      this._blob.size()\n    );\n\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken((authToken, appCheckToken) => {\n      let requestInfo;\n      try {\n        requestInfo = continueResumableUpload(\n          this._ref._location,\n          this._ref.storage,\n          url,\n          this._blob,\n          chunkSize,\n          this._mappings,\n          status,\n          this._makeProgressCallback()\n        );\n      } catch (e) {\n        this._error = e as StorageError;\n        this._transition(InternalTaskState.ERROR);\n        return;\n      }\n      const uploadRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken,\n        /*retry=*/ false // Upload requests should not be retried as each retry should be preceded by another query request. Which is handled in this file.\n      );\n      this._request = uploadRequest;\n      uploadRequest.getPromise().then((newStatus: ResumableUploadStatus) => {\n        this._increaseMultiplier();\n        this._request = undefined;\n        this._updateProgress(newStatus.current);\n        if (newStatus.finalized) {\n          this._metadata = newStatus.metadata;\n          this._transition(InternalTaskState.SUCCESS);\n        } else {\n          this.completeTransitions_();\n        }\n      }, this._errorHandler);\n    });\n  }\n\n  private _increaseMultiplier(): void {\n    const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n\n    // Max chunk size is 32M.\n    if (currentSize * 2 < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  }\n\n  private _fetchMetadata(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getMetadata(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings\n      );\n      const metadataRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = metadataRequest;\n      metadataRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._metadataErrorHandler);\n    });\n  }\n\n  private _oneShotUpload(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = multipartUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const multipartRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = multipartRequest;\n      multipartRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._updateProgress(this._blob.size());\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._errorHandler);\n    });\n  }\n\n  private _updateProgress(transferred: number): void {\n    const old = this._transferred;\n    this._transferred = transferred;\n\n    // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  }\n\n  private _transition(state: InternalTaskState): void {\n    if (this._state === state) {\n      return;\n    }\n    switch (state) {\n      case InternalTaskState.CANCELING:\n      case InternalTaskState.PAUSING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        } else if (this.pendingTimeout) {\n          clearTimeout(this.pendingTimeout);\n          this.pendingTimeout = undefined;\n          this.completeTransitions_();\n        }\n        break;\n      case InternalTaskState.RUNNING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        const wasPaused = this._state === InternalTaskState.PAUSED;\n        this._state = state;\n        if (wasPaused) {\n          this._notifyObservers();\n          this._start();\n        }\n        break;\n      case InternalTaskState.PAUSED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.CANCELED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.ERROR:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.SUCCESS:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      default: // Ignore\n    }\n  }\n\n  private completeTransitions_(): void {\n    switch (this._state) {\n      case InternalTaskState.PAUSING:\n        this._transition(InternalTaskState.PAUSED);\n        break;\n      case InternalTaskState.CANCELING:\n        this._transition(InternalTaskState.CANCELED);\n        break;\n      case InternalTaskState.RUNNING:\n        this._start();\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        break;\n    }\n  }\n\n  /**\n   * A snapshot of the current task state.\n   */\n  get snapshot(): UploadTaskSnapshot {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    return {\n      bytesTransferred: this._transferred,\n      totalBytes: this._blob.size(),\n      state: externalState,\n      metadata: this._metadata!,\n      task: this,\n      ref: this._ref\n    };\n  }\n\n  /**\n   * Adds a callback for an event.\n   * @param type - The type of event to listen for.\n   * @param nextOrObserver -\n   *     The `next` function, which gets called for each item in\n   *     the event stream, or an observer object with some or all of these three\n   *     properties (`next`, `error`, `complete`).\n   * @param error - A function that gets called with a `StorageError`\n   *     if the event stream ends due to an error.\n   * @param completed - A function that gets called if the\n   *     event stream ends normally.\n   * @returns\n   *     If only the event argument is passed, returns a function you can use to\n   *     add callbacks (see the examples above). If more than just the event\n   *     argument is passed, returns a function you can call to unregister the\n   *     callbacks.\n   */\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | StorageObserver<UploadTaskSnapshot>\n      | null\n      | ((snapshot: UploadTaskSnapshot) => unknown),\n    error?: ((a: StorageError) => unknown) | null,\n    completed?: CompleteFn | null\n  ): Unsubscribe | Subscribe<UploadTaskSnapshot> {\n    // Note: `type` isn't being used. Its type is also incorrect. TaskEvent should not be a string.\n    const observer = new Observer(\n      (nextOrObserver as\n        | StorageObserverInternal<UploadTaskSnapshot>\n        | NextFn<UploadTaskSnapshot>) || undefined,\n      error || undefined,\n      completed || undefined\n    );\n    this._addObserver(observer);\n    return () => {\n      this._removeObserver(observer);\n    };\n  }\n\n  /**\n   * This object behaves like a Promise, and resolves with its snapshot data\n   * when the upload completes.\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\n   * @param onRejected - The rejection callback.\n   */\n  then<U>(\n    onFulfilled?: ((value: UploadTaskSnapshot) => U | Promise<U>) | null,\n    onRejected?: ((error: StorageError) => U | Promise<U>) | null\n  ): Promise<U> {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then<U>(\n      onFulfilled as (value: UploadTaskSnapshot) => U | Promise<U>,\n      onRejected as ((error: unknown) => Promise<never>) | null\n    );\n  }\n\n  /**\n   * Equivalent to calling `then(null, onRejected)`.\n   */\n  catch<T>(onRejected: (p1: StorageError) => T | Promise<T>): Promise<T> {\n    return this.then(null, onRejected);\n  }\n\n  /**\n   * Adds the given observer.\n   */\n  private _addObserver(observer: Observer<UploadTaskSnapshot>): void {\n    this._observers.push(observer);\n    this._notifyObserver(observer);\n  }\n\n  /**\n   * Removes the given observer.\n   */\n  private _removeObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const i = this._observers.indexOf(observer);\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  }\n\n  private _notifyObservers(): void {\n    this._finishPromise();\n    const observers = this._observers.slice();\n    observers.forEach(observer => {\n      this._notifyObserver(observer);\n    });\n  }\n\n  private _finishPromise(): void {\n    if (this._resolve !== undefined) {\n      let triggered = true;\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          fbsAsync(this._resolve.bind(null, this.snapshot))();\n          break;\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          const toCall = this._reject as (p1: StorageError) => void;\n          fbsAsync(toCall.bind(null, this._error as StorageError))();\n          break;\n        default:\n          triggered = false;\n          break;\n      }\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  }\n\n  private _notifyObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          fbsAsync(observer.next.bind(observer, this.snapshot))();\n        }\n        break;\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          fbsAsync(observer.complete.bind(observer))();\n        }\n        break;\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as StorageError)\n          )();\n        }\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as StorageError)\n          )();\n        }\n    }\n  }\n\n  /**\n   * Resumes a paused task. Has no effect on a currently running or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  resume(): boolean {\n    const valid =\n      this._state === InternalTaskState.PAUSED ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.RUNNING);\n    }\n    return valid;\n  }\n\n  /**\n   * Pauses a currently running task. Has no effect on a paused or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  pause(): boolean {\n    const valid = this._state === InternalTaskState.RUNNING;\n    if (valid) {\n      this._transition(InternalTaskState.PAUSING);\n    }\n    return valid;\n  }\n\n  /**\n   * Cancels a currently running or paused task. Has no effect on a complete or\n   * failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  cancel(): boolean {\n    const valid =\n      this._state === InternalTaskState.RUNNING ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.CANCELING);\n    }\n    return valid;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines the Firebase StorageReference class.\n */\n\nimport { PassThrough, Transform, TransformOptions } from 'stream';\n\nimport { FbsBlob } from './implementation/blob';\nimport { Location } from './implementation/location';\nimport { getMappings } from './implementation/metadata';\nimport { child, lastComponent, parent } from './implementation/path';\nimport {\n  deleteObject as requestsDeleteObject,\n  getBytes,\n  getDownloadUrl as requestsGetDownloadUrl,\n  getMetadata as requestsGetMetadata,\n  list as requestsList,\n  multipartUpload,\n  updateMetadata as requestsUpdateMetadata\n} from './implementation/requests';\nimport { ListOptions, UploadResult } from './public-types';\nimport { dataFromString, StringFormat } from './implementation/string';\nimport { Metadata } from './metadata';\nimport { FirebaseStorageImpl } from './service';\nimport { ListResult } from './list';\nimport { UploadTask } from './task';\nimport { invalidRootOperation, noDownloadURL } from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport {\n  newBlobConnection,\n  newBytesConnection,\n  newStreamConnection,\n  newTextConnection\n} from './platform/connection';\n\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @internal\n * @param _location - An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nexport class Reference {\n  _location: Location;\n\n  constructor(\n    private _service: FirebaseStorageImpl,\n    location: string | Location\n  ) {\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n\n  /**\n   * Returns the URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  toString(): string {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n\n  protected _newRef(\n    service: FirebaseStorageImpl,\n    location: Location\n  ): Reference {\n    return new Reference(service, location);\n  }\n\n  /**\n   * A reference to the root of this object's bucket.\n   */\n  get root(): Reference {\n    const location = new Location(this._location.bucket, '');\n    return this._newRef(this._service, location);\n  }\n\n  /**\n   * The name of the bucket containing this reference's object.\n   */\n  get bucket(): string {\n    return this._location.bucket;\n  }\n\n  /**\n   * The full path of this object.\n   */\n  get fullPath(): string {\n    return this._location.path;\n  }\n\n  /**\n   * The short name of this object, which is the last component of the full path.\n   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\n   */\n  get name(): string {\n    return lastComponent(this._location.path);\n  }\n\n  /**\n   * The `StorageService` instance this `StorageReference` is associated with.\n   */\n  get storage(): FirebaseStorageImpl {\n    return this._service;\n  }\n\n  /**\n   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\n   * this reference is the root.\n   */\n  get parent(): Reference | null {\n    const newPath = parent(this._location.path);\n    if (newPath === null) {\n      return null;\n    }\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n\n  /**\n   * Utility function to throw an error in methods that do not accept a root reference.\n   */\n  _throwIfRoot(name: string): void {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded bytes.\n */\nexport function getBytesInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): Promise<ArrayBuffer> {\n  ref._throwIfRoot('getBytes');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newBytesConnection)\n    .then(bytes =>\n      maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n          (bytes as ArrayBuffer).slice(0, maxDownloadSizeBytes)\n        : (bytes as ArrayBuffer)\n    );\n}\n\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded blob.\n */\nexport function getBlobInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): Promise<Blob> {\n  ref._throwIfRoot('getBlob');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newBlobConnection)\n    .then(blob =>\n      maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n          (blob as Blob).slice(0, maxDownloadSizeBytes)\n        : (blob as Blob)\n    );\n}\n\n/** Stream the bytes at the object's location. */\nexport function getStreamInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): NodeJS.ReadableStream {\n  ref._throwIfRoot('getStream');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n\n  /** A transformer that passes through the first n bytes. */\n  const newMaxSizeTransform: (n: number) => TransformOptions = n => {\n    let missingBytes = n;\n    return {\n      transform(chunk, encoding, callback) {\n        // GCS may not honor the Range header for small files\n        if (chunk.length < missingBytes) {\n          this.push(chunk);\n          missingBytes -= chunk.length;\n        } else {\n          this.push(chunk.slice(0, missingBytes));\n          this.emit('end');\n        }\n        callback();\n      }\n    } as TransformOptions;\n  };\n\n  const result =\n    maxDownloadSizeBytes !== undefined\n      ? new Transform(newMaxSizeTransform(maxDownloadSizeBytes))\n      : new PassThrough();\n\n  ref.storage\n    .makeRequestWithTokens(requestInfo, newStreamConnection)\n    .then(stream => (stream as NodeJS.ReadableStream).pipe(result))\n    .catch(e => result.destroy(e));\n  return result;\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n *\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadBytes');\n  const requestInfo = multipartUpload(\n    ref.storage,\n    ref._location,\n    getMappings(),\n    new FbsBlob(data, true),\n    metadata\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newTextConnection)\n    .then(finalMetadata => {\n      return {\n        metadata: finalMetadata,\n        ref\n      };\n    });\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): UploadTask {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the newly uploaded string.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: Reference,\n  value: string,\n  format: StringFormat = StringFormat.RAW,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadString');\n  const data = dataFromString(format, value);\n  const metadataClone = { ...metadata } as Metadata;\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType!;\n  }\n  return uploadBytes(ref, data.data, metadataClone);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - StorageReference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: Reference): Promise<ListResult> {\n  const accumulator: ListResult = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n\n/**\n * Separated from listAll because async functions can't use \"arguments\".\n * @param ref\n * @param accumulator\n * @param pageToken\n */\nasync function listAllHelper(\n  ref: Reference,\n  accumulator: ListResult,\n  pageToken?: string\n): Promise<void> {\n  const opt: ListOptions = {\n    // maxResults is 1000 by default.\n    pageToken\n  };\n  const nextPage = await list(ref, opt);\n  accumulator.prefixes.push(...nextPage.prefixes);\n  accumulator.items.push(...nextPage.items);\n  if (nextPage.nextPageToken != null) {\n    await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n  }\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - StorageReference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: Reference,\n  options?: ListOptions | null\n): Promise<ListResult> {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber(\n        'options.maxResults',\n        /* minValue= */ 1,\n        /* maxValue= */ 1000,\n        options.maxResults\n      );\n    }\n  }\n  const op = options || {};\n  const requestInfo = requestsList(\n    ref.storage,\n    ref._location,\n    /*delimiter= */ '/',\n    op.pageToken,\n    op.maxResults\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - StorageReference to get metadata from.\n */\nexport function getMetadata(ref: Reference): Promise<Metadata> {\n  ref._throwIfRoot('getMetadata');\n  const requestInfo = requestsGetMetadata(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - StorageReference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves\n *     with the new metadata for this object.\n *     See `firebaseStorage.Reference.prototype.getMetadata`\n */\nexport function updateMetadata(\n  ref: Reference,\n  metadata: Partial<Metadata>\n): Promise<Metadata> {\n  ref._throwIfRoot('updateMetadata');\n  const requestInfo = requestsUpdateMetadata(\n    ref.storage,\n    ref._location,\n    metadata,\n    getMappings()\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: Reference): Promise<string> {\n  ref._throwIfRoot('getDownloadURL');\n  const requestInfo = requestsGetDownloadUrl(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newTextConnection)\n    .then(url => {\n      if (url === null) {\n        throw noDownloadURL();\n      }\n      return url;\n    });\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - StorageReference for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: Reference): Promise<void> {\n  ref._throwIfRoot('deleteObject');\n  const requestInfo = requestsDeleteObject(ref.storage, ref._location);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Returns reference for object obtained by appending `childPath` to `ref`.\n *\n * @param ref - StorageReference to get child of.\n * @param childPath - Child path from provided ref.\n * @returns A reference to the object obtained by\n * appending childPath, removing any duplicate, beginning, or trailing\n * slashes.\n *\n */\nexport function _getChild(ref: Reference, childPath: string): Reference {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Location } from './implementation/location';\nimport { FailRequest } from './implementation/failrequest';\nimport { Request, makeRequest } from './implementation/request';\nimport { RequestInfo } from './implementation/requestinfo';\nimport { Reference, _getChild } from './reference';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app';\nimport {\n  CONFIG_STORAGE_BUCKET_KEY,\n  DEFAULT_HOST,\n  DEFAULT_MAX_OPERATION_RETRY_TIME,\n  DEFAULT_MAX_UPLOAD_RETRY_TIME\n} from './implementation/constants';\nimport {\n  invalidArgument,\n  appDeleted,\n  noDefaultBucket\n} from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport { FirebaseStorage } from './public-types';\nimport { createMockUserToken, EmulatorMockTokenOptions } from '@firebase/util';\nimport { Connection, ConnectionType } from './implementation/connection';\n\nexport function isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given url.\n */\nfunction refFromURL(service: FirebaseStorageImpl, url: string): Reference {\n  return new Reference(service, url);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given path in the default\n * bucket.\n */\nfunction refFromPath(\n  ref: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference {\n  if (ref instanceof FirebaseStorageImpl) {\n    const service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    const reference = new Reference(service, service._bucket!);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      return _getChild(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\n/**\n * Returns a storage Reference for the given url.\n * @param storage - `Storage` instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorageImpl, url?: string): Reference;\n/**\n * Returns a storage Reference for the given path in the\n * default bucket.\n * @param storageOrRef - `Storage` service or storage `Reference`.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if Storage\n * instance provided) or returns same reference (if Reference provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference;\nexport function ref(\n  serviceOrRef: FirebaseStorageImpl | Reference,\n  pathOrUrl?: string\n): Reference | null {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof FirebaseStorageImpl) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument(\n        'To use ref(service, url), the first argument must be a Storage instance.'\n      );\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(\n  host: string,\n  config?: FirebaseOptions\n): Location | null {\n  const bucketString = config?.[CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString, host);\n}\n\nexport function connectStorageEmulator(\n  storage: FirebaseStorageImpl,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  storage.host = `${host}:${port}`;\n  storage._protocol = 'http';\n  const { mockUserToken } = options;\n  if (mockUserToken) {\n    storage._overrideAuthToken =\n      typeof mockUserToken === 'string'\n        ? mockUserToken\n        : createMockUserToken(mockUserToken, storage.app.options.projectId);\n  }\n}\n\n/**\n * A service that provides Firebase Storage Reference instances.\n * @param opt_url - gs:// url to a custom Storage Bucket\n *\n * @internal\n */\nexport class FirebaseStorageImpl implements FirebaseStorage {\n  _bucket: Location | null = null;\n  /**\n   * This string can be in the formats:\n   * - host\n   * - host:port\n   */\n  private _host: string = DEFAULT_HOST;\n  _protocol: string = 'https';\n  protected readonly _appId: string | null = null;\n  private readonly _requests: Set<Request<unknown>>;\n  private _deleted: boolean = false;\n  private _maxOperationRetryTime: number;\n  private _maxUploadRetryTime: number;\n  _overrideAuthToken?: string;\n\n  constructor(\n    /**\n     * FirebaseApp associated with this StorageService instance.\n     */\n    readonly app: FirebaseApp,\n    readonly _authProvider: Provider<FirebaseAuthInternalName>,\n    /**\n     * @internal\n     */\n    readonly _appCheckProvider: Provider<AppCheckInternalComponentName>,\n    /**\n     * @internal\n     */\n    readonly _url?: string,\n    readonly _firebaseVersion?: string\n  ) {\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n\n  /**\n   * The host string for this service, in the form of `host` or\n   * `host:port`.\n   */\n  get host(): string {\n    return this._host;\n  }\n\n  set host(host: string) {\n    this._host = host;\n    if (this._url != null) {\n      this._bucket = Location.makeFromBucketSpec(this._url, host);\n    } else {\n      this._bucket = extractBucket(host, this.app.options);\n    }\n  }\n\n  /**\n   * The maximum time to retry uploads in milliseconds.\n   */\n  get maxUploadRetryTime(): number {\n    return this._maxUploadRetryTime;\n  }\n\n  set maxUploadRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxUploadRetryTime = time;\n  }\n\n  /**\n   * The maximum time to retry operations other than uploads or downloads in\n   * milliseconds.\n   */\n  get maxOperationRetryTime(): number {\n    return this._maxOperationRetryTime;\n  }\n\n  set maxOperationRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxOperationRetryTime = time;\n  }\n\n  async _getAuthToken(): Promise<string | null> {\n    if (this._overrideAuthToken) {\n      return this._overrideAuthToken;\n    }\n    const auth = this._authProvider.getImmediate({ optional: true });\n    if (auth) {\n      const tokenData = await auth.getToken();\n      if (tokenData !== null) {\n        return tokenData.accessToken;\n      }\n    }\n    return null;\n  }\n\n  async _getAppCheckToken(): Promise<string | null> {\n    const appCheck = this._appCheckProvider.getImmediate({ optional: true });\n    if (appCheck) {\n      const result = await appCheck.getToken();\n      // TODO: What do we want to do if there is an error getting the token?\n      // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\n      // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\n      // the token (actual or dummy) to send requests.\n      return result.token;\n    }\n    return null;\n  }\n\n  /**\n   * Stop running requests and prevent more from being created.\n   */\n  _delete(): Promise<void> {\n    if (!this._deleted) {\n      this._deleted = true;\n      this._requests.forEach(request => request.cancel());\n      this._requests.clear();\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\n   * at the given Location.\n   */\n  _makeStorageReference(loc: Location): Reference {\n    return new Reference(this, loc);\n  }\n\n  /**\n   * @param requestInfo - HTTP RequestInfo object\n   * @param authToken - Firebase auth token\n   */\n  _makeRequest<I extends ConnectionType, O>(\n    requestInfo: RequestInfo<I, O>,\n    requestFactory: () => Connection<I>,\n    authToken: string | null,\n    appCheckToken: string | null,\n    retry = true\n  ): Request<O> {\n    if (!this._deleted) {\n      const request = makeRequest(\n        requestInfo,\n        this._appId,\n        authToken,\n        appCheckToken,\n        requestFactory,\n        this._firebaseVersion,\n        retry\n      );\n      this._requests.add(request);\n      // Request removes itself from set when complete.\n      request.getPromise().then(\n        () => this._requests.delete(request),\n        () => this._requests.delete(request)\n      );\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n\n  async makeRequestWithTokens<I extends ConnectionType, O>(\n    requestInfo: RequestInfo<I, O>,\n    requestFactory: () => Connection<I>\n  ): Promise<O> {\n    const [authToken, appCheckToken] = await Promise.all([\n      this._getAuthToken(),\n      this._getAppCheckToken()\n    ]);\n\n    return this._makeRequest(\n      requestInfo,\n      requestFactory,\n      authToken,\n      appCheckToken\n    ).getPromise();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Type constant for Firebase Storage.\n */\nexport const STORAGE_TYPE = 'storage';\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\n\nimport {\n  ref as refInternal,\n  FirebaseStorageImpl,\n  connectStorageEmulator as connectEmulatorInternal\n} from './service';\nimport { Provider } from '@firebase/component';\n\nimport {\n  StorageReference,\n  FirebaseStorage,\n  UploadResult,\n  ListOptions,\n  ListResult,\n  UploadTask,\n  SettableMetadata,\n  UploadMetadata,\n  FullMetadata\n} from './public-types';\nimport { Metadata as MetadataInternal } from './metadata';\nimport {\n  uploadBytes as uploadBytesInternal,\n  uploadBytesResumable as uploadBytesResumableInternal,\n  uploadString as uploadStringInternal,\n  getMetadata as getMetadataInternal,\n  updateMetadata as updateMetadataInternal,\n  list as listInternal,\n  listAll as listAllInternal,\n  getDownloadURL as getDownloadURLInternal,\n  deleteObject as deleteObjectInternal,\n  Reference,\n  _getChild as _getChildInternal,\n  getBytesInternal\n} from './reference';\nimport { STORAGE_TYPE } from './constants';\nimport {\n  EmulatorMockTokenOptions,\n  getModularInstance,\n  getDefaultEmulatorHostnameAndPort\n} from '@firebase/util';\nimport { StringFormat } from './implementation/string';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n\nexport { StorageError, StorageErrorCode } from './implementation/error';\n\n/**\n * Public types.\n */\nexport * from './public-types';\n\nexport { Location as _Location } from './implementation/location';\nexport { UploadTask as _UploadTask } from './task';\nexport type { Reference as _Reference } from './reference';\nexport type { FirebaseStorageImpl as _FirebaseStorageImpl } from './service';\nexport { FbsBlob as _FbsBlob } from './implementation/blob';\nexport { dataFromString as _dataFromString } from './implementation/string';\nexport {\n  invalidRootOperation as _invalidRootOperation,\n  invalidArgument as _invalidArgument\n} from './implementation/error';\nexport {\n  TaskEvent as _TaskEvent,\n  TaskState as _TaskState\n} from './implementation/taskenums';\nexport { StringFormat };\n\n/**\n * Downloads the data at the object's location. Returns an error if the object\n * is not found.\n *\n * To use this functionality, you have to whitelist your app's origin in your\n * Cloud Storage bucket. See also\n * https://cloud.google.com/storage/docs/configuring-cors\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A Promise containing the object's bytes\n */\nexport function getBytes(\n  ref: StorageReference,\n  maxDownloadSizeBytes?: number\n): Promise<ArrayBuffer> {\n  ref = getModularInstance(ref);\n  return getBytesInternal(ref as Reference, maxDownloadSizeBytes);\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadBytesInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the string to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: StorageReference,\n  value: string,\n  format?: StringFormat,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadStringInternal(\n    ref as Reference,\n    value,\n    format,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): UploadTask {\n  ref = getModularInstance(ref);\n  return uploadBytesResumableInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  ) as UploadTask;\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - {@link StorageReference} to get metadata from.\n */\nexport function getMetadata(ref: StorageReference): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return getMetadataInternal(ref as Reference) as Promise<FullMetadata>;\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - {@link StorageReference} to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves with the new metadata for this object.\n */\nexport function updateMetadata(\n  ref: StorageReference,\n  metadata: SettableMetadata\n): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return updateMetadataInternal(\n    ref as Reference,\n    metadata as Partial<MetadataInternal>\n  ) as Promise<FullMetadata>;\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - {@link StorageReference} to get list from.\n * @param options - See {@link ListOptions} for details.\n * @returns A `Promise` that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: StorageReference,\n  options?: ListOptions\n): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listInternal(ref as Reference, options);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: `listAll` may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - {@link StorageReference} to get list from.\n *\n * @returns A `Promise` that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: StorageReference): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listAllInternal(ref as Reference);\n}\n\n/**\n * Returns the download URL for the given {@link StorageReference}.\n * @public\n * @param ref - {@link StorageReference} to get the download URL for.\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: StorageReference): Promise<string> {\n  ref = getModularInstance(ref);\n  return getDownloadURLInternal(ref as Reference);\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - {@link StorageReference} for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: StorageReference): Promise<void> {\n  ref = getModularInstance(ref);\n  return deleteObjectInternal(ref as Reference);\n}\n\n/**\n * Returns a {@link StorageReference} for the given url.\n * @param storage - {@link FirebaseStorage} instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorage, url?: string): StorageReference;\n/**\n * Returns a {@link StorageReference} for the given path in the\n * default bucket.\n * @param storageOrRef - {@link FirebaseStorage} or {@link StorageReference}.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if {@link FirebaseStorage}\n * instance provided) or returns same reference (if {@link StorageReference} provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorage | StorageReference,\n  path?: string\n): StorageReference;\nexport function ref(\n  serviceOrRef: FirebaseStorage | StorageReference,\n  pathOrUrl?: string\n): StorageReference | null {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return refInternal(\n    serviceOrRef as FirebaseStorageImpl | Reference,\n    pathOrUrl\n  );\n}\n\n/**\n * @internal\n */\nexport function _getChild(ref: StorageReference, childPath: string): Reference {\n  return _getChildInternal(ref as Reference, childPath);\n}\n\n/**\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\n * @public\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\n * If not passed, uses the app's default Storage Bucket.\n * @returns A {@link FirebaseStorage} instance.\n */\nexport function getStorage(\n  app: FirebaseApp = getApp(),\n  bucketUrl?: string\n): FirebaseStorage {\n  app = getModularInstance(app);\n  const storageProvider: Provider<'storage'> = _getProvider(app, STORAGE_TYPE);\n  const storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  const emulator = getDefaultEmulatorHostnameAndPort('storage');\n  if (emulator) {\n    connectStorageEmulator(storageInstance, ...emulator);\n  }\n  return storageInstance;\n}\n\n/**\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\n *\n * @param storage - The {@link FirebaseStorage} instance\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 5001)\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\n * token to use for unit testing Security Rules.\n * @public\n */\nexport function connectStorageEmulator(\n  storage: FirebaseStorage,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  connectEmulatorInternal(storage as FirebaseStorageImpl, host, port, options);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StorageReference } from './public-types';\nimport { Reference, getBlobInternal } from './reference';\nimport { getModularInstance } from '@firebase/util';\n\n/**\n * Downloads the data at the object's location. Returns an error if the object\n * is not found.\n *\n * To use this functionality, you have to whitelist your app's origin in your\n * Cloud Storage bucket. See also\n * https://cloud.google.com/storage/docs/configuring-cors\n *\n * This API is not available in Node.\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A Promise that resolves with a Blob containing the object's bytes\n */\nexport function getBlob(\n  ref: StorageReference,\n  maxDownloadSizeBytes?: number\n): Promise<Blob> {\n  ref = getModularInstance(ref);\n  return getBlobInternal(ref as Reference, maxDownloadSizeBytes);\n}\n\n/**\n * Downloads the data at the object's location. Raises an error event if the\n * object is not found.\n *\n * This API is only available in Node.\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A stream with the object's data as bytes\n */\nexport function getStream(\n  ref: StorageReference,\n  maxDownloadSizeBytes?: number\n): NodeJS.ReadableStream {\n  throw new Error('getStream() is only supported by NodeJS builds');\n}\n","/**\n * Cloud Storage for Firebase\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\n\nimport { FirebaseStorageImpl } from '../src/service';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\nimport { name, version } from '../package.json';\n\nimport { FirebaseStorage } from './public-types';\nimport { STORAGE_TYPE } from './constants';\n\nexport * from './api';\nexport * from './api.browser';\n\nfunction factory(\n  container: ComponentContainer,\n  { instanceIdentifier: url }: InstanceFactoryOptions\n): FirebaseStorage {\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n  const appCheckProvider = container.getProvider('app-check-internal');\n\n  return new FirebaseStorageImpl(\n    app,\n    authProvider,\n    appCheckProvider,\n    url,\n    SDK_VERSION\n  );\n}\n\nfunction registerStorage(): void {\n  _registerComponent(\n    new Component(\n      STORAGE_TYPE,\n      factory,\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\n  registerVersion(name, version, '__RUNTIME_ENV__');\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n\nregisterStorage();\n"]},"metadata":{},"sourceType":"module"}